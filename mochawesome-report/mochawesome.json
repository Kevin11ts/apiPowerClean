{
  "stats": {
    "suites": 65,
    "tests": 106,
    "passes": 106,
    "pending": 0,
    "failures": 0,
    "start": "2024-11-28T20:31:23.020Z",
    "end": "2024-11-28T20:31:23.475Z",
    "duration": 455,
    "testsRegistered": 106,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "609c1356-a180-42f6-ae6d-dea391c6f842",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "948c75ee-70c9-4e19-9744-bf5949d11182",
          "title": "Pruebas del controlador de clientes",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
          "file": "\\tests\\clienteControlador.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de clientes\"",
              "fullTitle": "Pruebas del controlador de clientes \"after each\" hook in \"Pruebas del controlador de clientes\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "ea24db50-fcdb-4bf4-ae77-145384c1f006",
              "parentUUID": "948c75ee-70c9-4e19-9744-bf5949d11182",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e14cc3c2-dc6e-4ae7-853b-5cfa8a296ffb",
              "title": "Método GET: Obtiene todos los clientes",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
              "file": "\\tests\\clienteControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los clientes exitosamente",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Obtiene todos los clientes Debería obtener todos los clientes exitosamente",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockClientes = [\n    { id: 1, nombre: 'Juan', apellido: 'Pérez' },\n    { id: 2, nombre: 'Ana', apellido: 'López' }\n];\nsinon.stub(Cliente, 'findAll').resolves(mockClientes);\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.getAllClientes(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockClientes\n})).to.be.true;",
                  "err": {},
                  "uuid": "8b20d16f-6472-49bc-af7f-8041b0d26113",
                  "parentUUID": "e14cc3c2-dc6e-4ae7-853b-5cfa8a296ffb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los clientes",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Obtiene todos los clientes Debería manejar errores al obtener los clientes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Cliente, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.getAllClientes(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "60af4c4b-4b43-405d-8490-396119e737f8",
                  "parentUUID": "e14cc3c2-dc6e-4ae7-853b-5cfa8a296ffb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b20d16f-6472-49bc-af7f-8041b0d26113",
                "60af4c4b-4b43-405d-8490-396119e737f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e637e32-cc52-4be9-94b0-ffbe8e62acaf",
              "title": "Método GET: Buscar clientes por todos los parámetros",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
              "file": "\\tests\\clienteControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería buscar clientes exitosamente",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Buscar clientes por todos los parámetros Debería buscar clientes exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const searchString = 'Juan';\nconst mockClientes = [{ id: 1, nombre: 'Juan', apellido: 'Pérez' }];\nsinon.stub(Cliente, 'searchAllColumns').resolves(mockClientes);\nconst req = { params: { q: searchString } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.searchAllColumns(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockClientes\n})).to.be.true;",
                  "err": {},
                  "uuid": "809a3f66-7a7c-48a4-96f6-19c6033ae20f",
                  "parentUUID": "5e637e32-cc52-4be9-94b0-ffbe8e62acaf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Buscar clientes por todos los parámetros Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = { params: {} };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.searchAllColumns(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({\n    code: 400,\n    message: \"El parámetro 'q' es obligatorio\",\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "9f6a210f-601a-43e4-94c0-30feae28c4b4",
                  "parentUUID": "5e637e32-cc52-4be9-94b0-ffbe8e62acaf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "809a3f66-7a7c-48a4-96f6-19c6033ae20f",
                "9f6a210f-601a-43e4-94c0-30feae28c4b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b6e0a40-0fb8-4420-8018-dbd0238347c2",
              "title": "Método POST: Crea un nuevo cliente",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
              "file": "\\tests\\clienteControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear un cliente exitosamente",
                  "fullTitle": "Pruebas del controlador de clientes Método POST: Crea un nuevo cliente Debería crear un cliente exitosamente",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nuevoCliente = { id: 1, nombre: 'Carlos', apellido: 'Sánchez' };\nsinon.stub(Cliente, 'create').resolves(nuevoCliente);\nconst req = { body: { nombre: 'Carlos', apellido: 'Sánchez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.createCliente(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'Cliente creado exitosamente',\n    data: nuevoCliente\n})).to.be.true;",
                  "err": {},
                  "uuid": "011bf9e2-4674-4556-8f00-444eb2ea830f",
                  "parentUUID": "4b6e0a40-0fb8-4420-8018-dbd0238347c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear un cliente",
                  "fullTitle": "Pruebas del controlador de clientes Método POST: Crea un nuevo cliente Debería manejar errores al crear un cliente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Cliente, 'create').rejects(new Error('Error al crear el cliente'));\nconst req = { body: { nombre: 'Carlos', apellido: 'Sánchez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.createCliente(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear el cliente',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "4b8ee3d4-051b-492f-86f0-9bc5dad48969",
                  "parentUUID": "4b6e0a40-0fb8-4420-8018-dbd0238347c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "011bf9e2-4674-4556-8f00-444eb2ea830f",
                "4b8ee3d4-051b-492f-86f0-9bc5dad48969"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0cdacd38-db94-4c61-9486-ab87102d4778",
              "title": "Método GET: Obtiene un cliente por ID",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
              "file": "\\tests\\clienteControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener un cliente por ID exitosamente",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Obtiene un cliente por ID Debería obtener un cliente por ID exitosamente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockCliente = { id: 1, nombre: 'Juan', apellido: 'Pérez' };\nsinon.stub(Cliente, 'findById').resolves(mockCliente);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.getClienteById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockCliente\n})).to.be.true;",
                  "err": {},
                  "uuid": "ceed56c4-f8c9-4550-b683-85dd1a2d61b6",
                  "parentUUID": "0cdacd38-db94-4c61-9486-ab87102d4778",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el cliente no existe",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Obtiene un cliente por ID Debería devolver un error 404 si el cliente no existe",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Cliente, 'findById').resolves(null);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.getClienteById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Cliente no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "3fc49d9f-a0ca-4b28-b61f-2b966d76ae07",
                  "parentUUID": "0cdacd38-db94-4c61-9486-ab87102d4778",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ceed56c4-f8c9-4550-b683-85dd1a2d61b6",
                "3fc49d9f-a0ca-4b28-b61f-2b966d76ae07"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc3b1d06-76ee-4b94-8fd4-457f35abd697",
              "title": "Método PUT: Actualiza un cliente",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
              "file": "\\tests\\clienteControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería actualizar un cliente exitosamente",
                  "fullTitle": "Pruebas del controlador de clientes Método PUT: Actualiza un cliente Debería actualizar un cliente exitosamente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const clienteActualizado = { id: 1, nombre: 'Juan', apellido: 'Pérez' };\nsinon.stub(Cliente, 'update').resolves(clienteActualizado);\nconst req = { params: { id: '1' }, body: { nombre: 'Juan', apellido: 'Pérez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.updateCliente(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Cliente actualizado exitosamente',\n    data: clienteActualizado\n})).to.be.true;",
                  "err": {},
                  "uuid": "74423249-2b9b-4612-9d8f-bcc4dff67169",
                  "parentUUID": "cc3b1d06-76ee-4b94-8fd4-457f35abd697",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el cliente no existe",
                  "fullTitle": "Pruebas del controlador de clientes Método PUT: Actualiza un cliente Debería devolver un error 404 si el cliente no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Cliente, 'update').resolves(null);\nconst req = { params: { id: '999' }, body: { nombre: 'Juan', apellido: 'Pérez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.updateCliente(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Cliente no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "41fa33c0-6c14-4c41-8c4d-525c2a3d6b2a",
                  "parentUUID": "cc3b1d06-76ee-4b94-8fd4-457f35abd697",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74423249-2b9b-4612-9d8f-bcc4dff67169",
                "41fa33c0-6c14-4c41-8c4d-525c2a3d6b2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cebf8087-74b9-49a0-895e-c8eec4c2e92b",
              "title": "Método DELETE: Elimina un cliente",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
              "file": "\\tests\\clienteControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar un cliente exitosamente",
                  "fullTitle": "Pruebas del controlador de clientes Método DELETE: Elimina un cliente Debería eliminar un cliente exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const clienteEliminado = { id: 1, nombre: 'Juan', apellido: 'Pérez' };\nsinon.stub(Cliente, 'delete').resolves(clienteEliminado);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.deleteCliente(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Cliente eliminado exitosamente',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "d7493d17-23ba-4807-8b57-04266b15b5c1",
                  "parentUUID": "cebf8087-74b9-49a0-895e-c8eec4c2e92b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el cliente no existe",
                  "fullTitle": "Pruebas del controlador de clientes Método DELETE: Elimina un cliente Debería devolver un error 404 si el cliente no existe",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Cliente, 'delete').resolves(false);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.deleteCliente(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Cliente no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "f5392505-8e9e-4c6f-bda4-0224d3efdb63",
                  "parentUUID": "cebf8087-74b9-49a0-895e-c8eec4c2e92b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7493d17-23ba-4807-8b57-04266b15b5c1",
                "f5392505-8e9e-4c6f-bda4-0224d3efdb63"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "03df9bd4-83d0-495c-a3c8-eeda1d41437a",
              "title": "Método GET: Descargar clientes en formato Excel",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
              "file": "\\tests\\clienteControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería generar y descargar el archivo Excel exitosamente",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Descargar clientes en formato Excel Debería generar y descargar el archivo Excel exitosamente",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockClientes = [\n    { id: 1, nombre: 'Juan', apellido: 'Pérez' },\n    { id: 2, nombre: 'Ana', apellido: 'López' }\n];\nsinon.stub(Cliente, 'generarExcel').resolves(mockClientes);\nsinon.stub(excel, 'write').returns(Buffer.from('test'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    setHeader: sinon.stub(),\n    send: sinon.stub()\n};\nawait ClienteController.downloadClientesExcel(req, res);\nexpect(res.setHeader.calledWith('Content-Disposition', 'attachment; filename=clientes.xlsx')).to.be.true;\nexpect(res.setHeader.calledWith('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')).to.be.true;\nexpect(res.send.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "f91af03e-3112-4cb1-846c-cd6684465f22",
                  "parentUUID": "03df9bd4-83d0-495c-a3c8-eeda1d41437a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al generar el archivo Excel",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Descargar clientes en formato Excel Debería manejar errores al generar el archivo Excel",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Cliente, 'generarExcel').rejects(new Error('Error al generar el archivo Excel'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.downloadClientesExcel(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al generar el archivo Excel.',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "de7d9cb3-b126-4099-83c3-eefeb0583504",
                  "parentUUID": "03df9bd4-83d0-495c-a3c8-eeda1d41437a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f91af03e-3112-4cb1-846c-cd6684465f22",
                "de7d9cb3-b126-4099-83c3-eefeb0583504"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a469912a-01e0-4e48-82f0-ebcc02044b0b",
          "title": "Pruebas del controlador de detalle de ventas",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
          "file": "\\tests\\detalleVentaControlador.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de detalle de ventas\"",
              "fullTitle": "Pruebas del controlador de detalle de ventas \"after each\" hook in \"Pruebas del controlador de detalle de ventas\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "5d84113b-6af6-444a-8ad1-83b64b8af473",
              "parentUUID": "a469912a-01e0-4e48-82f0-ebcc02044b0b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "cd5106b2-47b3-42a3-9c19-c7f8e6d5135b",
              "title": "Método GET: Obtiene todos los detalles de ventas",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
              "file": "\\tests\\detalleVentaControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los detalles de ventas exitosamente",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Obtiene todos los detalles de ventas Debería obtener todos los detalles de ventas exitosamente",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockDetalleVentas = [\n    { id: 1, producto: 'Producto 1', cantidad: 10 },\n    { id: 2, producto: 'Producto 2', cantidad: 20 }\n];\nsinon.stub(DetalleVenta, 'findAll').resolves(mockDetalleVentas);\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.getAllDetalleVentas(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockDetalleVentas\n})).to.be.true;",
                  "err": {},
                  "uuid": "e4189102-b573-49d9-b377-da4b67a2281b",
                  "parentUUID": "cd5106b2-47b3-42a3-9c19-c7f8e6d5135b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los detalles de ventas",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Obtiene todos los detalles de ventas Debería manejar errores al obtener los detalles de ventas",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(DetalleVenta, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.getAllDetalleVentas(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "bcf8290c-2463-458f-9e23-dd14f07f50cc",
                  "parentUUID": "cd5106b2-47b3-42a3-9c19-c7f8e6d5135b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4189102-b573-49d9-b377-da4b67a2281b",
                "bcf8290c-2463-458f-9e23-dd14f07f50cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa42ca15-1b69-4a5e-a997-3f07bcf76973",
              "title": "Método GET: Buscar detalles de ventas por todos los parámetros",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
              "file": "\\tests\\detalleVentaControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería buscar detalles de ventas exitosamente",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Buscar detalles de ventas por todos los parámetros Debería buscar detalles de ventas exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const searchString = 'Producto 1';\nconst mockDetalleVentas = [{ id: 1, producto: 'Producto 1', cantidad: 10 }];\nsinon.stub(DetalleVenta, 'searchAllColumns').resolves(mockDetalleVentas);\nconst req = { params: { q: searchString } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.searchAllColumnsDetalleVentas(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockDetalleVentas\n})).to.be.true;",
                  "err": {},
                  "uuid": "a5ca80ed-fbbb-455f-ab98-8a7d3d44d3d4",
                  "parentUUID": "aa42ca15-1b69-4a5e-a997-3f07bcf76973",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Buscar detalles de ventas por todos los parámetros Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = { params: {} };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.searchAllColumnsDetalleVentas(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({\n    code: 400,\n    message: \"El parámetro 'q' es obligatorio\",\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "0ce30f9d-77e8-48ca-8c05-39a64b5b96d6",
                  "parentUUID": "aa42ca15-1b69-4a5e-a997-3f07bcf76973",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5ca80ed-fbbb-455f-ab98-8a7d3d44d3d4",
                "0ce30f9d-77e8-48ca-8c05-39a64b5b96d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a72c68fe-34a0-4eb9-b25d-48d190e9ab03",
              "title": "Método POST: Crea un nuevo detalle de venta",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
              "file": "\\tests\\detalleVentaControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear un detalle de venta exitosamente",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método POST: Crea un nuevo detalle de venta Debería crear un detalle de venta exitosamente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nuevoDetalleVenta = { id: 1, producto: 'Producto 1', cantidad: 10 };\nsinon.stub(DetalleVenta, 'create').resolves(nuevoDetalleVenta);\nconst req = { body: { producto: 'Producto 1', cantidad: 10 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.createDetalleVenta(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'El detalle de venta fue creado exitosamente',\n    data: nuevoDetalleVenta\n})).to.be.true;",
                  "err": {},
                  "uuid": "e1678959-89af-423b-b059-75fb11095d29",
                  "parentUUID": "a72c68fe-34a0-4eb9-b25d-48d190e9ab03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear un detalle de venta",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método POST: Crea un nuevo detalle de venta Debería manejar errores al crear un detalle de venta",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(DetalleVenta, 'create').rejects(new Error('Error al crear el detalle de venta'));\nconst req = { body: { producto: 'Producto 1', cantidad: 10 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.createDetalleVenta(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear el detalle de venta',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "744491f2-3af9-4bab-894a-8bdb19f6f7db",
                  "parentUUID": "a72c68fe-34a0-4eb9-b25d-48d190e9ab03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e1678959-89af-423b-b059-75fb11095d29",
                "744491f2-3af9-4bab-894a-8bdb19f6f7db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9fc0e575-8f8e-4d9d-9322-9b4ce5adb1b9",
              "title": "Método GET: Obtiene un detalle de venta por ID",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
              "file": "\\tests\\detalleVentaControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener un detalle de venta por ID exitosamente",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Obtiene un detalle de venta por ID Debería obtener un detalle de venta por ID exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockDetalleVenta = { id: 1, producto: 'Producto 1', cantidad: 10 };\nsinon.stub(DetalleVenta, 'findById').resolves(mockDetalleVenta);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.getDetalleVentaById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockDetalleVenta\n})).to.be.true;",
                  "err": {},
                  "uuid": "b9131a2a-10bb-4637-b391-299ce263ad47",
                  "parentUUID": "9fc0e575-8f8e-4d9d-9322-9b4ce5adb1b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el detalle de venta no existe",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Obtiene un detalle de venta por ID Debería devolver un error 404 si el detalle de venta no existe",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(DetalleVenta, 'findById').resolves(null);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.getDetalleVentaById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Detalle de venta no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "b80fe4be-5673-4c99-9c4a-9e21d477d5f1",
                  "parentUUID": "9fc0e575-8f8e-4d9d-9322-9b4ce5adb1b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9131a2a-10bb-4637-b391-299ce263ad47",
                "b80fe4be-5673-4c99-9c4a-9e21d477d5f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7dddc16f-ad89-44a0-bfb5-fc4a40c7ef99",
              "title": "Método PUT: Actualiza un detalle de venta",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
              "file": "\\tests\\detalleVentaControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería actualizar un detalle de venta exitosamente",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método PUT: Actualiza un detalle de venta Debería actualizar un detalle de venta exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const detalleVentaActualizado = { id: 1, producto: 'Producto 1', cantidad: 15 };\nsinon.stub(DetalleVenta, 'update').resolves(detalleVentaActualizado);\nconst req = { params: { id: '1' }, body: { producto: 'Producto 1', cantidad: 15 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.updateDetalleVenta(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'El Detalle de venta fue actualizado exitosamente',\n    data: detalleVentaActualizado\n})).to.be.true;",
                  "err": {},
                  "uuid": "0d3f5be6-e774-4bd3-b940-b35ddf0b5974",
                  "parentUUID": "7dddc16f-ad89-44a0-bfb5-fc4a40c7ef99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el detalle de venta no existe",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método PUT: Actualiza un detalle de venta Debería devolver un error 404 si el detalle de venta no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(DetalleVenta, 'update').resolves(null);\nconst req = { params: { id: '999' }, body: { producto: 'Producto 1', cantidad: 15 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.updateDetalleVenta(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'El Detalle de venta no fue encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "eda5edf5-860b-479c-9bc5-48548e7d17d6",
                  "parentUUID": "7dddc16f-ad89-44a0-bfb5-fc4a40c7ef99",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d3f5be6-e774-4bd3-b940-b35ddf0b5974",
                "eda5edf5-860b-479c-9bc5-48548e7d17d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa5aae2c-eff9-4e91-a6db-dab87151d3b0",
              "title": "Método DELETE: Elimina un detalle de venta",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
              "file": "\\tests\\detalleVentaControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar un detalle de venta exitosamente",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método DELETE: Elimina un detalle de venta Debería eliminar un detalle de venta exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const detalleVentaEliminado = { id: 1, producto: 'Producto 1', cantidad: 10 };\nsinon.stub(DetalleVenta, 'delete').resolves(detalleVentaEliminado);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.deleteDetalleVenta(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Detalle de venta eliminado exitosamente',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "7bc76f84-65a7-48b1-942c-a9a811691b15",
                  "parentUUID": "aa5aae2c-eff9-4e91-a6db-dab87151d3b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el detalle de venta no existe",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método DELETE: Elimina un detalle de venta Debería devolver un error 404 si el detalle de venta no existe",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(DetalleVenta, 'delete').resolves(false);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.deleteDetalleVenta(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Detalle de venta no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "3a69254c-cf08-482b-926d-955a7077655f",
                  "parentUUID": "aa5aae2c-eff9-4e91-a6db-dab87151d3b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7bc76f84-65a7-48b1-942c-a9a811691b15",
                "3a69254c-cf08-482b-926d-955a7077655f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "90370115-3254-4d42-90c9-9eca5a702bc7",
              "title": "Método GET: Descargar detalle de ventas en Excel",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
              "file": "\\tests\\detalleVentaControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería generar y descargar el archivo Excel exitosamente",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Descargar detalle de ventas en Excel Debería generar y descargar el archivo Excel exitosamente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockDetalleVentas = [\n    { id: 1, producto: 'Producto 1', cantidad: 10 },\n    { id: 2, producto: 'Producto 2', cantidad: 20 }\n];\nsinon.stub(DetalleVenta, 'generarExcel').resolves(mockDetalleVentas);\nsinon.stub(excel, 'write').returns(Buffer.from('test'));\nconst req = {};\nconst res = {\n    setHeader: sinon.stub(),\n    send: sinon.stub()\n};\nawait DetalleVentaController.downloadDetalleVentasExcel(req, res);\nexpect(res.setHeader.calledWith('Content-Disposition', 'attachment; filename=detalle_ventas.xlsx')).to.be.true;\nexpect(res.setHeader.calledWith('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')).to.be.true;\nexpect(res.send.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "bf2aff87-1a7b-4d51-a0cb-2c5b3dad2eb3",
                  "parentUUID": "90370115-3254-4d42-90c9-9eca5a702bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al generar el archivo Excel",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Descargar detalle de ventas en Excel Debería manejar errores al generar el archivo Excel",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(DetalleVenta, 'generarExcel').rejects(new Error('Error al generar el archivo Excel'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.downloadDetalleVentasExcel(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al generar el archivo Excel.',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "9e27154c-ced2-48c6-b57d-6bd80801243f",
                  "parentUUID": "90370115-3254-4d42-90c9-9eca5a702bc7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf2aff87-1a7b-4d51-a0cb-2c5b3dad2eb3",
                "9e27154c-ced2-48c6-b57d-6bd80801243f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d4c33d31-80b2-489d-aaa8-b5461970ac1f",
          "title": "Pruebas del controlador de empleados",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
          "file": "\\tests\\empleadosController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de empleados\"",
              "fullTitle": "Pruebas del controlador de empleados \"after each\" hook in \"Pruebas del controlador de empleados\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "84052dcf-5c67-4f5d-9267-01cee9f1d68d",
              "parentUUID": "d4c33d31-80b2-489d-aaa8-b5461970ac1f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "8e6e1b8c-3ff2-4991-961f-723d7e74c91a",
              "title": "Método GET: Obtener todos los empleados",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
              "file": "\\tests\\empleadosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los empleados exitosamente",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Obtener todos los empleados Debería obtener todos los empleados exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockEmpleados = [\n    { id: 1, nombre: 'Juan', apellido: 'Pérez' },\n    { id: 2, nombre: 'Ana', apellido: 'Gómez' }\n];\nsinon.stub(Empleado, 'findAll').resolves(mockEmpleados);\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.getAllEmpleados(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockEmpleados\n})).to.be.true;",
                  "err": {},
                  "uuid": "3b46c398-44fc-4010-ac03-c66326963440",
                  "parentUUID": "8e6e1b8c-3ff2-4991-961f-723d7e74c91a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los empleados",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Obtener todos los empleados Debería manejar errores al obtener los empleados",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Empleado, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.getAllEmpleados(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "00e42f80-9374-4c8c-92dc-1acd21ced918",
                  "parentUUID": "8e6e1b8c-3ff2-4991-961f-723d7e74c91a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b46c398-44fc-4010-ac03-c66326963440",
                "00e42f80-9374-4c8c-92dc-1acd21ced918"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "acbb68af-99db-4ea0-9c27-b6f2f387d927",
              "title": "Método GET: Buscar empleados por todos los parámetros",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
              "file": "\\tests\\empleadosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería buscar empleados exitosamente",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Buscar empleados por todos los parámetros Debería buscar empleados exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const searchString = 'Juan';\nconst mockEmpleados = [{ id: 1, nombre: 'Juan', apellido: 'Pérez' }];\nsinon.stub(Empleado, 'searchAllColumns').resolves(mockEmpleados);\nconst req = { params: { q: searchString } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.searchAllColumns(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockEmpleados\n})).to.be.true;",
                  "err": {},
                  "uuid": "d114742a-cfe4-4b88-a889-86bc2223b9f6",
                  "parentUUID": "acbb68af-99db-4ea0-9c27-b6f2f387d927",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Buscar empleados por todos los parámetros Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = { params: {} };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.searchAllColumns(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({\n    code: 400,\n    message: \"El parámetro 'q' es obligatorio\",\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "be0dc31a-2808-48b9-9d5e-ef6b45e623b8",
                  "parentUUID": "acbb68af-99db-4ea0-9c27-b6f2f387d927",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d114742a-cfe4-4b88-a889-86bc2223b9f6",
                "be0dc31a-2808-48b9-9d5e-ef6b45e623b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "623aadf8-f0fd-4c06-8da4-5cc1d0997633",
              "title": "Método POST: Crear un nuevo empleado",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
              "file": "\\tests\\empleadosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear un empleado exitosamente",
                  "fullTitle": "Pruebas del controlador de empleados Método POST: Crear un nuevo empleado Debería crear un empleado exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nuevoEmpleado = { id: 1, nombre: 'Juan', apellido: 'Pérez' };\nsinon.stub(Empleado, 'create').resolves(nuevoEmpleado);\nconst req = { body: { nombre: 'Juan', apellido: 'Pérez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.createEmpleado(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'Empleado creado exitosamente',\n    data: nuevoEmpleado\n})).to.be.true;",
                  "err": {},
                  "uuid": "9fab1304-6a2a-4b4f-b1c6-65342933434d",
                  "parentUUID": "623aadf8-f0fd-4c06-8da4-5cc1d0997633",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear un empleado",
                  "fullTitle": "Pruebas del controlador de empleados Método POST: Crear un nuevo empleado Debería manejar errores al crear un empleado",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Empleado, 'create').rejects(new Error('Error al crear el empleado'));\nconst req = { body: { nombre: 'Juan', apellido: 'Pérez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.createEmpleado(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear el empleado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "86281552-a417-49cb-8135-9815eb16470a",
                  "parentUUID": "623aadf8-f0fd-4c06-8da4-5cc1d0997633",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9fab1304-6a2a-4b4f-b1c6-65342933434d",
                "86281552-a417-49cb-8135-9815eb16470a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7bb34e37-d571-4a8f-81c0-21bf70b13e4e",
              "title": "Método GET: Obtener un empleado por ID",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
              "file": "\\tests\\empleadosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener un empleado por ID exitosamente",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Obtener un empleado por ID Debería obtener un empleado por ID exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockEmpleado = { id: 1, nombre: 'Juan', apellido: 'Pérez' };\nsinon.stub(Empleado, 'findById').resolves(mockEmpleado);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.getEmpleadoById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockEmpleado\n})).to.be.true;",
                  "err": {},
                  "uuid": "44f2cffb-6525-4d86-b2f8-6c1886860f3d",
                  "parentUUID": "7bb34e37-d571-4a8f-81c0-21bf70b13e4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el empleado no existe",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Obtener un empleado por ID Debería devolver un error 404 si el empleado no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Empleado, 'findById').resolves(null);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.getEmpleadoById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Empleado no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "874d1a8d-4743-47e6-87e7-cc44d3ac7026",
                  "parentUUID": "7bb34e37-d571-4a8f-81c0-21bf70b13e4e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44f2cffb-6525-4d86-b2f8-6c1886860f3d",
                "874d1a8d-4743-47e6-87e7-cc44d3ac7026"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af5064bb-d2da-4f70-8335-144e69dc9b85",
              "title": "Método PUT: Actualizar un empleado",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
              "file": "\\tests\\empleadosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería actualizar un empleado exitosamente",
                  "fullTitle": "Pruebas del controlador de empleados Método PUT: Actualizar un empleado Debería actualizar un empleado exitosamente",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const empleadoActualizado = { id: 1, nombre: 'Juan', apellido: 'Pérez' };\nsinon.stub(Empleado, 'update').resolves(empleadoActualizado);\nconst req = { params: { id: '1' }, body: { nombre: 'Juan', apellido: 'Pérez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.updateEmpleado(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Empleado actualizado exitosamente',\n    data: empleadoActualizado\n})).to.be.true;",
                  "err": {},
                  "uuid": "3bde8b5f-c4e9-4d42-9a3b-b0f250431666",
                  "parentUUID": "af5064bb-d2da-4f70-8335-144e69dc9b85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el empleado no existe",
                  "fullTitle": "Pruebas del controlador de empleados Método PUT: Actualizar un empleado Debería devolver un error 404 si el empleado no existe",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Empleado, 'update').resolves(null);\nconst req = { params: { id: '999' }, body: { nombre: 'Juan', apellido: 'Pérez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.updateEmpleado(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Empleado no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "4c281cca-c18e-4369-9d49-31b1e0056997",
                  "parentUUID": "af5064bb-d2da-4f70-8335-144e69dc9b85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3bde8b5f-c4e9-4d42-9a3b-b0f250431666",
                "4c281cca-c18e-4369-9d49-31b1e0056997"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "edbb2b78-c6dc-451d-b73f-7f44455f9f60",
              "title": "Método DELETE: Eliminar un empleado",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
              "file": "\\tests\\empleadosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar un empleado exitosamente",
                  "fullTitle": "Pruebas del controlador de empleados Método DELETE: Eliminar un empleado Debería eliminar un empleado exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const empleadoEliminado = { id: 1, nombre: 'Juan', apellido: 'Pérez' };\nsinon.stub(Empleado, 'delete').resolves(empleadoEliminado);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.deleteEmpleado(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Empleado eliminado exitosamente',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "bab26854-f9a3-4b7b-9fc4-2761db028331",
                  "parentUUID": "edbb2b78-c6dc-451d-b73f-7f44455f9f60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el empleado no existe",
                  "fullTitle": "Pruebas del controlador de empleados Método DELETE: Eliminar un empleado Debería devolver un error 404 si el empleado no existe",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Empleado, 'delete').resolves(false);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.deleteEmpleado(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Empleado no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "442f72c4-51af-4f11-8e5e-59fb38aef669",
                  "parentUUID": "edbb2b78-c6dc-451d-b73f-7f44455f9f60",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bab26854-f9a3-4b7b-9fc4-2761db028331",
                "442f72c4-51af-4f11-8e5e-59fb38aef669"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3e02e984-1fd2-43ef-8f08-a950ba2614ca",
              "title": "Método GET: Descargar empleados en Excel",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
              "file": "\\tests\\empleadosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería generar y descargar el archivo Excel exitosamente",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Descargar empleados en Excel Debería generar y descargar el archivo Excel exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockEmpleados = [\n    { id: 1, nombre: 'Juan', apellido: 'Pérez' },\n    { id: 2, nombre: 'Ana', apellido: 'Gómez' }\n];\nsinon.stub(Empleado, 'generarExcel').resolves(mockEmpleados);\nsinon.stub(excel, 'write').returns(Buffer.from('test'));\nconst req = {};\nconst res = {\n    setHeader: sinon.stub(),\n    send: sinon.stub()\n};\nawait EmpleadoController.downloadEmpleadosExcel(req, res);\nexpect(res.setHeader.calledWith('Content-Disposition', 'attachment; filename=empleados.xlsx')).to.be.true;\nexpect(res.setHeader.calledWith('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')).to.be.true;\nexpect(res.send.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "63d6be0e-43c7-4e92-a529-6a4bdc7ad267",
                  "parentUUID": "3e02e984-1fd2-43ef-8f08-a950ba2614ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al generar el archivo Excel",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Descargar empleados en Excel Debería manejar errores al generar el archivo Excel",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Empleado, 'generarExcel').rejects(new Error('Error al generar el archivo Excel'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.downloadEmpleadosExcel(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al generar el archivo Excel.',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "ab6cdc5e-f7ad-4eae-8755-fe0c5d5a0717",
                  "parentUUID": "3e02e984-1fd2-43ef-8f08-a950ba2614ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63d6be0e-43c7-4e92-a529-6a4bdc7ad267",
                "ab6cdc5e-f7ad-4eae-8755-fe0c5d5a0717"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b8d26f0a-d3a4-47f3-b4b1-381115491488",
          "title": "Pruebas del controlador de inventarios",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\inventarioController.test.js",
          "file": "\\tests\\inventarioController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de inventarios\"",
              "fullTitle": "Pruebas del controlador de inventarios \"after each\" hook in \"Pruebas del controlador de inventarios\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "7dbafa8a-1ffa-481e-9004-16fd73276756",
              "parentUUID": "b8d26f0a-d3a4-47f3-b4b1-381115491488",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "fa8ae884-96d4-4663-b8c9-43e4c866340f",
              "title": "Método GET: Obtiene todos los inventarios",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\inventarioController.test.js",
              "file": "\\tests\\inventarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los inventarios exitosamente",
                  "fullTitle": "Pruebas del controlador de inventarios Método GET: Obtiene todos los inventarios Debería obtener todos los inventarios exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockInventarios = [\n    { id: 1, nombre: 'Producto 1', cantidad: 10 },\n    { id: 2, nombre: 'Producto 2', cantidad: 20 }\n];\nsinon.stub(Inventario, 'findAll').resolves(mockInventarios);\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.getAllInventario(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockInventarios\n})).to.be.true;",
                  "err": {},
                  "uuid": "9dd66035-b2e7-45c3-b385-2710d4f41dcd",
                  "parentUUID": "fa8ae884-96d4-4663-b8c9-43e4c866340f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los inventarios",
                  "fullTitle": "Pruebas del controlador de inventarios Método GET: Obtiene todos los inventarios Debería manejar errores al obtener los inventarios",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Inventario, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.getAllInventario(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "c3b22b6e-b0fc-4ccf-a8c8-1611e651b7ae",
                  "parentUUID": "fa8ae884-96d4-4663-b8c9-43e4c866340f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9dd66035-b2e7-45c3-b385-2710d4f41dcd",
                "c3b22b6e-b0fc-4ccf-a8c8-1611e651b7ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40ae9494-7988-4672-b5d9-a07284407ded",
              "title": "Método GET: Buscar inventarios por todos los parámetros",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\inventarioController.test.js",
              "file": "\\tests\\inventarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería buscar inventarios exitosamente",
                  "fullTitle": "Pruebas del controlador de inventarios Método GET: Buscar inventarios por todos los parámetros Debería buscar inventarios exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const searchString = 'Producto';\nconst mockInventarios = [{ id: 1, nombre: 'Producto 1', cantidad: 10 }];\nsinon.stub(Inventario, 'searchAllColumns').resolves(mockInventarios);\nconst req = { params: { q: searchString } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.searchAllColumns(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockInventarios\n})).to.be.true;",
                  "err": {},
                  "uuid": "553fd1f9-a7e4-4432-bd4b-c703aa19a9c2",
                  "parentUUID": "40ae9494-7988-4672-b5d9-a07284407ded",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "fullTitle": "Pruebas del controlador de inventarios Método GET: Buscar inventarios por todos los parámetros Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = { params: {} };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.searchAllColumns(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({\n    code: 400,\n    message: \"El parámetro 'q' es obligatorio\",\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "0b925492-c1ab-4d12-8bdf-551bd7f451ca",
                  "parentUUID": "40ae9494-7988-4672-b5d9-a07284407ded",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "553fd1f9-a7e4-4432-bd4b-c703aa19a9c2",
                "0b925492-c1ab-4d12-8bdf-551bd7f451ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "31c5d5a3-3b03-481d-8fee-05a9c2bddd5c",
              "title": "Método POST: Crea un nuevo inventario",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\inventarioController.test.js",
              "file": "\\tests\\inventarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear un inventario exitosamente",
                  "fullTitle": "Pruebas del controlador de inventarios Método POST: Crea un nuevo inventario Debería crear un inventario exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nuevoInventario = { id: 1, nombre: 'Producto 1', cantidad: 10 };\nsinon.stub(Inventario, 'create').resolves(nuevoInventario);\nconst req = { body: { nombre: 'Producto 1', cantidad: 10 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.createInventario(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'Inventario creado exitosamente',\n    data: nuevoInventario\n})).to.be.true;",
                  "err": {},
                  "uuid": "67bdb9e9-0e2c-49d1-bc49-fa24575bd07f",
                  "parentUUID": "31c5d5a3-3b03-481d-8fee-05a9c2bddd5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear un inventario",
                  "fullTitle": "Pruebas del controlador de inventarios Método POST: Crea un nuevo inventario Debería manejar errores al crear un inventario",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Inventario, 'create').rejects(new Error('Error al crear el inventario'));\nconst req = { body: { nombre: 'Producto 1', cantidad: 10 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.createInventario(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear el inventario',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "81b0374e-3e9c-4313-a9e6-e350d23b546a",
                  "parentUUID": "31c5d5a3-3b03-481d-8fee-05a9c2bddd5c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67bdb9e9-0e2c-49d1-bc49-fa24575bd07f",
                "81b0374e-3e9c-4313-a9e6-e350d23b546a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ea74ec6b-1bf9-463a-9b98-7e46423547d1",
              "title": "Método GET: Obtiene un inventario por ID",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\inventarioController.test.js",
              "file": "\\tests\\inventarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener un inventario por ID exitosamente",
                  "fullTitle": "Pruebas del controlador de inventarios Método GET: Obtiene un inventario por ID Debería obtener un inventario por ID exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockInventario = { id: 1, nombre: 'Producto 1', cantidad: 10 };\nsinon.stub(Inventario, 'findById').resolves(mockInventario);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.getInventarioById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockInventario\n})).to.be.true;",
                  "err": {},
                  "uuid": "4814cff2-40bb-419c-b7cf-1230614ea7e5",
                  "parentUUID": "ea74ec6b-1bf9-463a-9b98-7e46423547d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el inventario no existe",
                  "fullTitle": "Pruebas del controlador de inventarios Método GET: Obtiene un inventario por ID Debería devolver un error 404 si el inventario no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Inventario, 'findById').resolves(null);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.getInventarioById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Inventario no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "888cc3a7-42ad-459d-8be3-57fa114b4399",
                  "parentUUID": "ea74ec6b-1bf9-463a-9b98-7e46423547d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4814cff2-40bb-419c-b7cf-1230614ea7e5",
                "888cc3a7-42ad-459d-8be3-57fa114b4399"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8dfda55b-8a9a-45cc-8c1f-437c19f99519",
              "title": "Método PUT: Actualiza un inventario",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\inventarioController.test.js",
              "file": "\\tests\\inventarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería actualizar un inventario exitosamente",
                  "fullTitle": "Pruebas del controlador de inventarios Método PUT: Actualiza un inventario Debería actualizar un inventario exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inventarioActualizado = { id: 1, nombre: 'Producto 1', cantidad: 15 };\nsinon.stub(Inventario, 'update').resolves(inventarioActualizado);\nconst req = { params: { id: '1' }, body: { nombre: 'Producto 1', cantidad: 15 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.updateInventario(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Inventario actualizado exitosamente',\n    data: inventarioActualizado\n})).to.be.true;",
                  "err": {},
                  "uuid": "acc4c408-1bab-4e70-abea-c7b38fc6136c",
                  "parentUUID": "8dfda55b-8a9a-45cc-8c1f-437c19f99519",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el inventario no existe",
                  "fullTitle": "Pruebas del controlador de inventarios Método PUT: Actualiza un inventario Debería devolver un error 404 si el inventario no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Inventario, 'update').resolves(null);\nconst req = { params: { id: '999' }, body: { nombre: 'Producto 1', cantidad: 15 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.updateInventario(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Inventario no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "e3e73184-5263-4a85-9a9b-cd3a769e7fe7",
                  "parentUUID": "8dfda55b-8a9a-45cc-8c1f-437c19f99519",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "acc4c408-1bab-4e70-abea-c7b38fc6136c",
                "e3e73184-5263-4a85-9a9b-cd3a769e7fe7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "82259585-b464-4901-a703-7bacb2bb4202",
              "title": "Método DELETE: Elimina un inventario",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\inventarioController.test.js",
              "file": "\\tests\\inventarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar un inventario exitosamente",
                  "fullTitle": "Pruebas del controlador de inventarios Método DELETE: Elimina un inventario Debería eliminar un inventario exitosamente",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inventarioEliminado = { id: 1, nombre: 'Producto 1', cantidad: 10 };\nsinon.stub(Inventario, 'delete').resolves(inventarioEliminado);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.deleteInventario(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Inventario eliminado exitosamente',\n    data: inventarioEliminado\n})).to.be.true;",
                  "err": {},
                  "uuid": "19a07efe-ea3c-4e81-a35a-322a5a0e650c",
                  "parentUUID": "82259585-b464-4901-a703-7bacb2bb4202",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el inventario no existe",
                  "fullTitle": "Pruebas del controlador de inventarios Método DELETE: Elimina un inventario Debería devolver un error 404 si el inventario no existe",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Inventario, 'delete').resolves(false);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.deleteInventario(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Inventario no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "6398ddd8-12b1-4150-9785-530d3d15de3d",
                  "parentUUID": "82259585-b464-4901-a703-7bacb2bb4202",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19a07efe-ea3c-4e81-a35a-322a5a0e650c",
                "6398ddd8-12b1-4150-9785-530d3d15de3d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e0af4f40-5fbf-4c7b-a764-3e5de2a1357d",
          "title": "Pruebas del controlador de productos",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\productosController.test.js",
          "file": "\\tests\\productosController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de productos\"",
              "fullTitle": "Pruebas del controlador de productos \"after each\" hook in \"Pruebas del controlador de productos\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "8f362b76-d42e-46fc-a81f-22ce7368a6d6",
              "parentUUID": "e0af4f40-5fbf-4c7b-a764-3e5de2a1357d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "8ef8d60a-5715-472a-91e8-ecc91b20286f",
              "title": "Método GET: Obtiene todos los productos",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\productosController.test.js",
              "file": "\\tests\\productosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los productos exitosamente",
                  "fullTitle": "Pruebas del controlador de productos Método GET: Obtiene todos los productos Debería obtener todos los productos exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockProductos = [\n    { id: 1, nombre: 'Producto A', precio: 100 },\n    { id: 2, nombre: 'Producto B', precio: 200 }\n];\nsinon.stub(Producto, 'findAll').resolves(mockProductos);\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ProductoController.getAllProductos(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockProductos\n})).to.be.true;",
                  "err": {},
                  "uuid": "30a0bed3-a76d-4db9-b4ad-17f40d7e9d46",
                  "parentUUID": "8ef8d60a-5715-472a-91e8-ecc91b20286f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los productos",
                  "fullTitle": "Pruebas del controlador de productos Método GET: Obtiene todos los productos Debería manejar errores al obtener los productos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Producto, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ProductoController.getAllProductos(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "e5bbe803-5274-4aa4-8913-e5da0f6d01ee",
                  "parentUUID": "8ef8d60a-5715-472a-91e8-ecc91b20286f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30a0bed3-a76d-4db9-b4ad-17f40d7e9d46",
                "e5bbe803-5274-4aa4-8913-e5da0f6d01ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8386cc31-1b13-44ba-b3a3-9d754785a39b",
              "title": "Método POST: Crea un producto",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\productosController.test.js",
              "file": "\\tests\\productosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear un producto exitosamente",
                  "fullTitle": "Pruebas del controlador de productos Método POST: Crea un producto Debería crear un producto exitosamente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nuevoProducto = { nombre: 'Producto C', precio: 300 };\nconst creadoProducto = { id: 3, ...nuevoProducto };\nsinon.stub(Producto, 'create').resolves(creadoProducto);\nconst req = { body: nuevoProducto };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ProductoController.createProducto(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'Producto creado exitosamente',\n    data: creadoProducto\n})).to.be.true;",
                  "err": {},
                  "uuid": "97a152eb-bb1b-441c-9ba5-e205b9db45fc",
                  "parentUUID": "8386cc31-1b13-44ba-b3a3-9d754785a39b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear un producto",
                  "fullTitle": "Pruebas del controlador de productos Método POST: Crea un producto Debería manejar errores al crear un producto",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Producto, 'create').rejects(new Error('Error al crear el producto'));\nconst req = { body: { nombre: 'Producto D', precio: 400 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ProductoController.createProducto(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear el producto',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "bcd5026f-1e2d-4ed6-8009-1e89cc5a4300",
                  "parentUUID": "8386cc31-1b13-44ba-b3a3-9d754785a39b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97a152eb-bb1b-441c-9ba5-e205b9db45fc",
                "bcd5026f-1e2d-4ed6-8009-1e89cc5a4300"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3023e9f0-10f2-4745-89ed-9a23f2a0af91",
              "title": "Método DELETE: Elimina un producto",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\productosController.test.js",
              "file": "\\tests\\productosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar un producto exitosamente",
                  "fullTitle": "Pruebas del controlador de productos Método DELETE: Elimina un producto Debería eliminar un producto exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Producto, 'delete').resolves(true);\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ProductoController.deleteProducto(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Producto eliminado exitosamente',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "7c3ce14e-cefa-49d1-9bcb-eb705d41b870",
                  "parentUUID": "3023e9f0-10f2-4745-89ed-9a23f2a0af91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería retornar error 404 si no se encuentra el producto",
                  "fullTitle": "Pruebas del controlador de productos Método DELETE: Elimina un producto Debería retornar error 404 si no se encuentra el producto",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Producto, 'delete').resolves(false);\nconst req = { params: { id: 999 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ProductoController.deleteProducto(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Producto no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "872eb62c-c1f2-4a90-bbf0-368fcc27b6b2",
                  "parentUUID": "3023e9f0-10f2-4745-89ed-9a23f2a0af91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al eliminar un producto",
                  "fullTitle": "Pruebas del controlador de productos Método DELETE: Elimina un producto Debería manejar errores al eliminar un producto",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Producto, 'delete').rejects(new Error('Error al eliminar el producto'));\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ProductoController.deleteProducto(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al eliminar el producto',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "df52b777-5a55-424b-be82-753126321d1f",
                  "parentUUID": "3023e9f0-10f2-4745-89ed-9a23f2a0af91",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c3ce14e-cefa-49d1-9bcb-eb705d41b870",
                "872eb62c-c1f2-4a90-bbf0-368fcc27b6b2",
                "df52b777-5a55-424b-be82-753126321d1f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8783bb49-cc80-4106-baf5-c2ed9a0336da",
          "title": "Pruebas del controlador de roles",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rolController.test.js",
          "file": "\\tests\\rolController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de roles\"",
              "fullTitle": "Pruebas del controlador de roles \"after each\" hook in \"Pruebas del controlador de roles\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "53101924-e436-418d-a5f6-e4c61ab1a832",
              "parentUUID": "8783bb49-cc80-4106-baf5-c2ed9a0336da",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "0c0bfedc-8ba4-496a-8db8-63f6e275a5f6",
              "title": "Método GET: Obtiene todos los roles",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rolController.test.js",
              "file": "\\tests\\rolController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los roles exitosamente",
                  "fullTitle": "Pruebas del controlador de roles Método GET: Obtiene todos los roles Debería obtener todos los roles exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockRoles = [\n    { id: 1, nombre: 'Admin' },\n    { id: 2, nombre: 'Usuario' }\n];\nsinon.stub(Rol, 'findAll').resolves(mockRoles);\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.getAllRol(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockRoles\n})).to.be.true;",
                  "err": {},
                  "uuid": "459c13da-254f-4b43-875b-06d128790226",
                  "parentUUID": "0c0bfedc-8ba4-496a-8db8-63f6e275a5f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los roles",
                  "fullTitle": "Pruebas del controlador de roles Método GET: Obtiene todos los roles Debería manejar errores al obtener los roles",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Rol, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.getAllRol(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "597029d1-bb81-4c24-95d5-13224cc19ca0",
                  "parentUUID": "0c0bfedc-8ba4-496a-8db8-63f6e275a5f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "459c13da-254f-4b43-875b-06d128790226",
                "597029d1-bb81-4c24-95d5-13224cc19ca0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1cedcff-29b6-45e7-8359-ad9cfe39ab72",
              "title": "Método GET: Obtiene todos los roles por un identificador",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rolController.test.js",
              "file": "\\tests\\rolController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener un rol por ID exitosamente",
                  "fullTitle": "Pruebas del controlador de roles Método GET: Obtiene todos los roles por un identificador Debería obtener un rol por ID exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockRol = { id: 1, nombre: 'Admin' };\nsinon.stub(Rol, 'findById').resolves(mockRol);\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.getRolById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockRol\n})).to.be.true;",
                  "err": {},
                  "uuid": "5e556901-f91e-4dd1-b35f-eeb6cfaf2903",
                  "parentUUID": "a1cedcff-29b6-45e7-8359-ad9cfe39ab72",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el rol no existe",
                  "fullTitle": "Pruebas del controlador de roles Método GET: Obtiene todos los roles por un identificador Debería devolver un error 404 si el rol no existe",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Rol, 'findById').resolves(null);\nconst req = { params: { id: 999 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.getRolById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Rol no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "ca5cac92-3ff9-4d06-a298-da025a5572c1",
                  "parentUUID": "a1cedcff-29b6-45e7-8359-ad9cfe39ab72",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al buscar un rol por ID",
                  "fullTitle": "Pruebas del controlador de roles Método GET: Obtiene todos los roles por un identificador Debería manejar errores al buscar un rol por ID",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Rol, 'findById').rejects(new Error('Error de base de datos'));\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.getRolById(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "b4a33f25-06fb-4b6c-afd2-51f2e6abf1b5",
                  "parentUUID": "a1cedcff-29b6-45e7-8359-ad9cfe39ab72",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e556901-f91e-4dd1-b35f-eeb6cfaf2903",
                "ca5cac92-3ff9-4d06-a298-da025a5572c1",
                "b4a33f25-06fb-4b6c-afd2-51f2e6abf1b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d2282fa1-f1d6-4923-8e30-6e9582e6d087",
              "title": "Método POST: Crea un nuevo rol",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rolController.test.js",
              "file": "\\tests\\rolController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear un rol exitosamente",
                  "fullTitle": "Pruebas del controlador de roles Método POST: Crea un nuevo rol Debería crear un rol exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nuevoRol = { nombre: 'Editor' };\nconst mockRolCreado = { id: 3, ...nuevoRol };\nsinon.stub(Rol, 'create').resolves(mockRolCreado);\nconst req = { body: nuevoRol };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.createRol(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'Rol creado exitosamente',\n    data: mockRolCreado\n})).to.be.true;",
                  "err": {},
                  "uuid": "3ff351ed-9699-4a93-9bed-0970963deaae",
                  "parentUUID": "d2282fa1-f1d6-4923-8e30-6e9582e6d087",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear un rol",
                  "fullTitle": "Pruebas del controlador de roles Método POST: Crea un nuevo rol Debería manejar errores al crear un rol",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Rol, 'create').rejects(new Error('Error al crear el rol'));\nconst req = { body: { nombre: 'Editor' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.createRol(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear el rol',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "1baacec9-23dc-4e5c-9fbf-bfc9c42dd562",
                  "parentUUID": "d2282fa1-f1d6-4923-8e30-6e9582e6d087",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3ff351ed-9699-4a93-9bed-0970963deaae",
                "1baacec9-23dc-4e5c-9fbf-bfc9c42dd562"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f271dc17-5658-45ef-8d14-de84e907414e",
              "title": "Método DELETE: Elimina un rol",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rolController.test.js",
              "file": "\\tests\\rolController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar un rol exitosamente",
                  "fullTitle": "Pruebas del controlador de roles Método DELETE: Elimina un rol Debería eliminar un rol exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Rol, 'delete').resolves(true);\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.deleteRol(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Rol eliminado exitosamente',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "4d0af2ad-bb7f-4440-a243-32a0983087b0",
                  "parentUUID": "f271dc17-5658-45ef-8d14-de84e907414e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el rol no existe",
                  "fullTitle": "Pruebas del controlador de roles Método DELETE: Elimina un rol Debería devolver un error 404 si el rol no existe",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Rol, 'delete').resolves(false);\nconst req = { params: { id: 999 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.deleteRol(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Rol no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "67b87623-a296-48bf-b78e-ea70664a9d96",
                  "parentUUID": "f271dc17-5658-45ef-8d14-de84e907414e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al eliminar un rol",
                  "fullTitle": "Pruebas del controlador de roles Método DELETE: Elimina un rol Debería manejar errores al eliminar un rol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Rol, 'delete').rejects(new Error('Error al eliminar el rol'));\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.deleteRol(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al eliminar el rol',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "1809dabe-1ee4-4256-a7a6-af23af3484a5",
                  "parentUUID": "f271dc17-5658-45ef-8d14-de84e907414e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d0af2ad-bb7f-4440-a243-32a0983087b0",
                "67b87623-a296-48bf-b78e-ea70664a9d96",
                "1809dabe-1ee4-4256-a7a6-af23af3484a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f291c36e-12fb-43a8-9764-ae0604842be6",
          "title": "Pruebas de las RUTAS de la API de clientes, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todos los clientes",
              "fullTitle": "Pruebas de las RUTAS de la API de clientes, método GET Debería obtener todos los clientes",
              "timedOut": false,
              "duration": 134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/clientes');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "341d6dd0-d4d6-44a5-9cd4-def11fd03c77",
              "parentUUID": "f291c36e-12fb-43a8-9764-ae0604842be6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "341d6dd0-d4d6-44a5-9cd4-def11fd03c77"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 134,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "72ae1969-17b7-4391-80aa-acff4ca75444",
          "title": "Pruebas de las RUTAS de la API del detalle de la venta, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todos los detalles de la venta",
              "fullTitle": "Pruebas de las RUTAS de la API del detalle de la venta, método GET Debería obtener todos los detalles de la venta",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/detalleVenta');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "dac2860b-b8bd-42e1-9317-b05250855192",
              "parentUUID": "72ae1969-17b7-4391-80aa-acff4ca75444",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dac2860b-b8bd-42e1-9317-b05250855192"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6066fbba-dadf-483a-bff6-8f77f37f6deb",
          "title": "Pruebas de las RUTAS de la API empleados, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todos los empleados",
              "fullTitle": "Pruebas de las RUTAS de la API empleados, método GET Debería obtener todos los empleados",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/empleados');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "67f0eb89-1cda-44aa-ba73-740dec85fb17",
              "parentUUID": "6066fbba-dadf-483a-bff6-8f77f37f6deb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "67f0eb89-1cda-44aa-ba73-740dec85fb17"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "96e42485-74f4-41f9-afbb-0e25d3a47625",
          "title": "Pruebas de las RUTAS de la API de inventarios, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todo el inventario",
              "fullTitle": "Pruebas de las RUTAS de la API de inventarios, método GET Debería obtener todo el inventario",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/inventario');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "98a4a6ee-d7f0-42bd-b5c4-86ce5dc012d8",
              "parentUUID": "96e42485-74f4-41f9-afbb-0e25d3a47625",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "98a4a6ee-d7f0-42bd-b5c4-86ce5dc012d8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3d851d46-5f4a-47f6-9688-e5614d339c32",
          "title": "Pruebas de las RUTAS de la API de productos, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todo los productos",
              "fullTitle": "Pruebas de las RUTAS de la API de productos, método GET Debería obtener todo los productos",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/productos');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "1b5e0d58-3821-4141-9861-99ecad999782",
              "parentUUID": "3d851d46-5f4a-47f6-9688-e5614d339c32",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b5e0d58-3821-4141-9861-99ecad999782"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d97b8890-0433-4c2d-9228-62ad014a7dc5",
          "title": "Pruebas de las RUTAS de la API sobre los roles, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todo los roles",
              "fullTitle": "Pruebas de las RUTAS de la API sobre los roles, método GET Debería obtener todo los roles",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/rol');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "75552b28-60a4-4a59-917a-7e3abcdf459f",
              "parentUUID": "d97b8890-0433-4c2d-9228-62ad014a7dc5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "75552b28-60a4-4a59-917a-7e3abcdf459f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7f3ac201-b544-46c0-92d9-4cace3aa2bdb",
          "title": "Pruebas de las RUTAS de la API sobre los tipos de productos que existen, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todo los tipos de productos",
              "fullTitle": "Pruebas de las RUTAS de la API sobre los tipos de productos que existen, método GET Debería obtener todo los tipos de productos",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/tipoProducto');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "8025bd90-4d26-4cc6-924f-597b7b32db6b",
              "parentUUID": "7f3ac201-b544-46c0-92d9-4cace3aa2bdb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8025bd90-4d26-4cc6-924f-597b7b32db6b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e7b72273-d43f-4b10-8d42-664a1e9317b0",
          "title": "Pruebas de las RUTAS de la API sobre los usuarios, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todo los usuarios",
              "fullTitle": "Pruebas de las RUTAS de la API sobre los usuarios, método GET Debería obtener todo los usuarios",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = 'powerclean'; // Sustituye por un token válido\nconst response = await supertest(app)\n  .get('/api/usuarios')\n  .set('Authorization', `Bearer ${token}`);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "4e751cd9-7184-4b2f-b33c-751e0545cd49",
              "parentUUID": "e7b72273-d43f-4b10-8d42-664a1e9317b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e751cd9-7184-4b2f-b33c-751e0545cd49"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "73a24413-ff3e-4463-aac3-9263dae15e64",
          "title": "Pruebas de las RUTAS de la API sobre todas las ventas, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todo las ventas",
              "fullTitle": "Pruebas de las RUTAS de la API sobre todas las ventas, método GET Debería obtener todo las ventas",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/venta');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "dbe9fdf3-d659-4eff-abe2-358cfdf2ef70",
              "parentUUID": "73a24413-ff3e-4463-aac3-9263dae15e64",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dbe9fdf3-d659-4eff-abe2-358cfdf2ef70"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "59021ff3-501e-4976-a11d-bb1a6ac7764a",
          "title": "Pruebas del controlador de tipos de productos",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\tipoProductoController.test.js",
          "file": "\\tests\\tipoProductoController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de tipos de productos\"",
              "fullTitle": "Pruebas del controlador de tipos de productos \"after each\" hook in \"Pruebas del controlador de tipos de productos\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e6ff8540-925a-4725-bdaa-0a82530d7cc5",
              "parentUUID": "59021ff3-501e-4976-a11d-bb1a6ac7764a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "0d8f5f2a-11a7-42fb-b3a8-c433b7e6479d",
              "title": "Método GET: Obtiene todos los tipos de productos",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\tipoProductoController.test.js",
              "file": "\\tests\\tipoProductoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los tipos de productos exitosamente",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método GET: Obtiene todos los tipos de productos Debería obtener todos los tipos de productos exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockTipoProductos = [\n    { id: 1, nombre: 'Electrónica' },\n    { id: 2, nombre: 'Ropa' }\n];\nsinon.stub(TipoProducto, 'findAll').resolves(mockTipoProductos);\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.getAllTipoProductos(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockTipoProductos\n})).to.be.true;",
                  "err": {},
                  "uuid": "f841b8b8-99dd-4662-a6ec-c740e8bfc56f",
                  "parentUUID": "0d8f5f2a-11a7-42fb-b3a8-c433b7e6479d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los tipos de productos",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método GET: Obtiene todos los tipos de productos Debería manejar errores al obtener los tipos de productos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(TipoProducto, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.getAllTipoProductos(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "09697f46-faaf-4344-aae2-12ec04422478",
                  "parentUUID": "0d8f5f2a-11a7-42fb-b3a8-c433b7e6479d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f841b8b8-99dd-4662-a6ec-c740e8bfc56f",
                "09697f46-faaf-4344-aae2-12ec04422478"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ad9ff42b-85eb-46eb-8999-220ade4c0e66",
              "title": "Método GET: Obtiene un tipo de producto por ID",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\tipoProductoController.test.js",
              "file": "\\tests\\tipoProductoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener un tipo de producto por ID exitosamente",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método GET: Obtiene un tipo de producto por ID Debería obtener un tipo de producto por ID exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockTipoProducto = { id: 1, nombre: 'Electrónica' };\nsinon.stub(TipoProducto, 'findById').resolves(mockTipoProducto);\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.getTipoProductoById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockTipoProducto\n})).to.be.true;",
                  "err": {},
                  "uuid": "ca602ac6-bf72-4d83-b0b7-cfe118190af0",
                  "parentUUID": "ad9ff42b-85eb-46eb-8999-220ade4c0e66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el tipo de producto no existe",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método GET: Obtiene un tipo de producto por ID Debería devolver un error 404 si el tipo de producto no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(TipoProducto, 'findById').resolves(null);\nconst req = { params: { id: 999 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.getTipoProductoById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Tipo de producto no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "c46694cd-3781-4565-9745-182bf7968b72",
                  "parentUUID": "ad9ff42b-85eb-46eb-8999-220ade4c0e66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener un tipo de producto por ID",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método GET: Obtiene un tipo de producto por ID Debería manejar errores al obtener un tipo de producto por ID",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(TipoProducto, 'findById').rejects(new Error('Error de base de datos'));\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.getTipoProductoById(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "c490e4d7-2a54-4890-8d9a-c9f893ae11c1",
                  "parentUUID": "ad9ff42b-85eb-46eb-8999-220ade4c0e66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca602ac6-bf72-4d83-b0b7-cfe118190af0",
                "c46694cd-3781-4565-9745-182bf7968b72",
                "c490e4d7-2a54-4890-8d9a-c9f893ae11c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0cc4ad53-81e0-403e-951c-de45412fbfef",
              "title": "Método POST: Crea un nuevo tipo de producto",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\tipoProductoController.test.js",
              "file": "\\tests\\tipoProductoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear un tipo de producto exitosamente",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método POST: Crea un nuevo tipo de producto Debería crear un tipo de producto exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock de la respuesta esperada\nconst nuevoTipoProducto = { id: 1, nombre: 'Michelln el de las llantas xd' };\nsinon.stub(TipoProducto, 'create').resolves(nuevoTipoProducto); // Simulamos la creación del tipo de producto\n    \nconst req = { body: { nombre: 'Electrónica' } }; // El cuerpo de la solicitud\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\n    \nawait TipoProductoController.createTipoProducto(req, res);\n    \n// Verifica que se haya llamado con el código 201 y los datos correctos\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'El tipo de producto fue creado exitosamente',\n    data: nuevoTipoProducto\n})).to.be.true;",
                  "err": {},
                  "uuid": "76b71363-a603-488c-b995-28a53a8abcc6",
                  "parentUUID": "0cc4ad53-81e0-403e-951c-de45412fbfef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear un tipo de producto",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método POST: Crea un nuevo tipo de producto Debería manejar errores al crear un tipo de producto",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(TipoProducto, 'create').rejects(new Error('Error al crear el tipo de producto'));\nconst req = { body: { nombre: 'Electrónica' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.createTipoProducto(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear el tipo de producto',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "f93a40a0-88e4-451b-a5c3-775f6c402082",
                  "parentUUID": "0cc4ad53-81e0-403e-951c-de45412fbfef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76b71363-a603-488c-b995-28a53a8abcc6",
                "f93a40a0-88e4-451b-a5c3-775f6c402082"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "70a69205-c6a7-4bee-8d10-20f9a5851bea",
              "title": "Método DELETE: Elimina un tipo de producto",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\tipoProductoController.test.js",
              "file": "\\tests\\tipoProductoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar un tipo de producto exitosamente",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método DELETE: Elimina un tipo de producto Debería eliminar un tipo de producto exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tipoProductoEliminado = { id: 1, nombre: 'Producto A' };  // Simulamos el objeto eliminado\nsinon.stub(TipoProducto, 'delete').resolves(tipoProductoEliminado);  // Devuelve el objeto eliminado\n        \nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\n        \nawait TipoProductoController.deleteTipoProducto(req, res);\n        \nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Tipo de producto eliminado exitosamente',\n    data: tipoProductoEliminado  // Aseguramos que se devuelva el objeto eliminado\n})).to.be.true;",
                  "err": {},
                  "uuid": "1e238d08-9480-448a-adef-9c73075fb317",
                  "parentUUID": "70a69205-c6a7-4bee-8d10-20f9a5851bea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el tipo de producto no existe",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método DELETE: Elimina un tipo de producto Debería devolver un error 404 si el tipo de producto no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(TipoProducto, 'delete').resolves(false);\nconst req = { params: { id: 999 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.deleteTipoProducto(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Tipo de producto no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "4224d075-5de6-4f8f-b89f-f7a8a05d1d7b",
                  "parentUUID": "70a69205-c6a7-4bee-8d10-20f9a5851bea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al eliminar un tipo de producto",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método DELETE: Elimina un tipo de producto Debería manejar errores al eliminar un tipo de producto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(TipoProducto, 'delete').rejects(new Error('Error al eliminar el tipo de producto'));\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.deleteTipoProducto(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al eliminar el tipo de producto',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "c3a61c9e-c23d-4dcc-b265-48f12b3743eb",
                  "parentUUID": "70a69205-c6a7-4bee-8d10-20f9a5851bea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e238d08-9480-448a-adef-9c73075fb317",
                "4224d075-5de6-4f8f-b89f-f7a8a05d1d7b",
                "c3a61c9e-c23d-4dcc-b265-48f12b3743eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b1a91cbe-0f03-4a2f-804f-b3874121de34",
          "title": "Pruebas del controlador de usuarios",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\usuarioController.test.js",
          "file": "\\tests\\usuarioController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de usuarios\"",
              "fullTitle": "Pruebas del controlador de usuarios \"after each\" hook in \"Pruebas del controlador de usuarios\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "10bf01e4-825e-4440-b012-7e2f5fedcf60",
              "parentUUID": "b1a91cbe-0f03-4a2f-804f-b3874121de34",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "83e8e35b-0ede-4130-90c5-63e1e26beea4",
              "title": "Método GET: Obtiene todos los usuarios",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\usuarioController.test.js",
              "file": "\\tests\\usuarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los usuarios exitosamente",
                  "fullTitle": "Pruebas del controlador de usuarios Método GET: Obtiene todos los usuarios Debería obtener todos los usuarios exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockUsuarios = [\n    { id: 1, nombre: 'Juan Pérez', email: 'juan@example.com' },\n    { id: 2, nombre: 'Ana Gómez', email: 'ana@example.com' }\n];\nsinon.stub(Usuario, 'findAll').resolves(mockUsuarios);\nconst req = { headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait UsuarioController.getAllUsuarios(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockUsuarios\n})).to.be.true;",
                  "err": {},
                  "uuid": "d8783825-b61c-4a0a-9505-811ad48815bd",
                  "parentUUID": "83e8e35b-0ede-4130-90c5-63e1e26beea4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los usuarios",
                  "fullTitle": "Pruebas del controlador de usuarios Método GET: Obtiene todos los usuarios Debería manejar errores al obtener los usuarios",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Usuario, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = { headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait UsuarioController.getAllUsuarios(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "cfc026e8-c034-4582-8dec-71e506d0695a",
                  "parentUUID": "83e8e35b-0ede-4130-90c5-63e1e26beea4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8783825-b61c-4a0a-9505-811ad48815bd",
                "cfc026e8-c034-4582-8dec-71e506d0695a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9080f22b-ec7a-40bf-af86-b218e4c3a23f",
              "title": "Método DELETE: Elimina un usuario",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\usuarioController.test.js",
              "file": "\\tests\\usuarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería manejar errores al eliminar un usuario",
                  "fullTitle": "Pruebas del controlador de usuarios Método DELETE: Elimina un usuario Debería manejar errores al eliminar un usuario",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Usuario, 'delete').rejects(new Error('Error al eliminar el usuario'));\nconst req = { params: { id: 1 }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait UsuarioController.delete(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al eliminar el usuario',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "dd2abddf-5931-4694-92de-b7151276f3c0",
                  "parentUUID": "9080f22b-ec7a-40bf-af86-b218e4c3a23f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd2abddf-5931-4694-92de-b7151276f3c0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d12170e9-188b-43ec-a7ca-ab40fb6783ef",
              "title": "Método GET: Genera y descarga un archivo Excel con la lista de usuarios",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\usuarioController.test.js",
              "file": "\\tests\\usuarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería generar y descargar el archivo Excel exitosamente",
                  "fullTitle": "Pruebas del controlador de usuarios Método GET: Genera y descarga un archivo Excel con la lista de usuarios Debería generar y descargar el archivo Excel exitosamente",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockUsuarios = [\n    { id: 1, nombre: 'Juan Pérez', email: 'juan@example.com' },\n    { id: 2, nombre: 'Ana Gómez', email: 'ana@example.com' }\n];\nsinon.stub(Usuario, 'generarExcel').resolves(mockUsuarios);\nconst req = { headers: { Authorization: 'powerclean' } };\nconst res = {\n    setHeader: sinon.stub(),\n    send: sinon.stub()\n};\nawait UsuarioController.downloadUsuariosExcel(req, res);\nexpect(res.setHeader.calledWith('Content-Disposition', 'attachment; filename=usuarios.xlsx')).to.be.true;\nexpect(res.setHeader.calledWith('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')).to.be.true;\nexpect(res.send.called).to.be.true;",
                  "err": {},
                  "uuid": "d06df6bd-057a-4486-be68-14c5d1d61254",
                  "parentUUID": "d12170e9-188b-43ec-a7ca-ab40fb6783ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d06df6bd-057a-4486-be68-14c5d1d61254"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e518b054-8623-4e51-9c77-784e33cbf2b9",
          "title": "Pruebas del controlador de ventas",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\ventasController.test.js",
          "file": "\\tests\\ventasController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de ventas\"",
              "fullTitle": "Pruebas del controlador de ventas \"after each\" hook in \"Pruebas del controlador de ventas\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "1eb90585-9d0b-45db-a67d-a768044ff89f",
              "parentUUID": "e518b054-8623-4e51-9c77-784e33cbf2b9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "699ce209-4457-4b25-9aa6-0945f0749b72",
              "title": "Método GET: Obtiene todas las ventas",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\ventasController.test.js",
              "file": "\\tests\\ventasController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todas las ventas exitosamente",
                  "fullTitle": "Pruebas del controlador de ventas Método GET: Obtiene todas las ventas Debería obtener todas las ventas exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockVentas = [\n    { id: 1, folioVenta: 'V001', total: 100 },\n    { id: 2, folioVenta: 'V002', total: 200 }\n];\nsinon.stub(Venta, 'findAll').resolves(mockVentas);\nconst req = { headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.getAllVentas(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockVentas\n})).to.be.true;",
                  "err": {},
                  "uuid": "b2909823-73fb-4146-85f2-5f7c3b7d3af0",
                  "parentUUID": "699ce209-4457-4b25-9aa6-0945f0749b72",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener las ventas",
                  "fullTitle": "Pruebas del controlador de ventas Método GET: Obtiene todas las ventas Debería manejar errores al obtener las ventas",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Venta, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = { headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.getAllVentas(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "889bef5a-d7a5-48cb-b0b5-18c1ad6d8d77",
                  "parentUUID": "699ce209-4457-4b25-9aa6-0945f0749b72",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2909823-73fb-4146-85f2-5f7c3b7d3af0",
                "889bef5a-d7a5-48cb-b0b5-18c1ad6d8d77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9a12aadf-a77d-47c9-b125-88aac4d80e4d",
              "title": "Método GET: Buscar ventas por todos los parámetros",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\ventasController.test.js",
              "file": "\\tests\\ventasController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería buscar ventas exitosamente",
                  "fullTitle": "Pruebas del controlador de ventas Método GET: Buscar ventas por todos los parámetros Debería buscar ventas exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const searchString = 'V001';\nconst mockVentas = [{ id: 1, folioVenta: 'V001', total: 100 }];\nsinon.stub(Venta, 'searchAllColumns').resolves(mockVentas);\nconst req = { params: { q: searchString }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.searchAllColumnsVentas(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockVentas\n})).to.be.true;",
                  "err": {},
                  "uuid": "444ee59a-a929-4186-bfa9-9eca90e9a343",
                  "parentUUID": "9a12aadf-a77d-47c9-b125-88aac4d80e4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "fullTitle": "Pruebas del controlador de ventas Método GET: Buscar ventas por todos los parámetros Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = { params: {}, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.searchAllColumnsVentas(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({\n    code: 400,\n    message: \"El parámetro 'q' es obligatorio\",\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "bdcef286-9c78-4da7-8834-ee0218954431",
                  "parentUUID": "9a12aadf-a77d-47c9-b125-88aac4d80e4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "444ee59a-a929-4186-bfa9-9eca90e9a343",
                "bdcef286-9c78-4da7-8834-ee0218954431"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cf82590c-33bd-4747-9da2-38908e056d4d",
              "title": "Método POST: Crea una nueva venta",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\ventasController.test.js",
              "file": "\\tests\\ventasController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear una venta exitosamente",
                  "fullTitle": "Pruebas del controlador de ventas Método POST: Crea una nueva venta Debería crear una venta exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nuevaVenta = { id: 1, folioVenta: 'V003', total: 300 };\nsinon.stub(Venta, 'create').resolves(nuevaVenta);\nconst req = { body: { folioVenta: 'V003', total: 300 }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.createVenta(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'Venta creada exitosamente',\n    data: nuevaVenta\n})).to.be.true;",
                  "err": {},
                  "uuid": "dbca45e5-5639-4407-b564-2feaa4ebd559",
                  "parentUUID": "cf82590c-33bd-4747-9da2-38908e056d4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear una venta",
                  "fullTitle": "Pruebas del controlador de ventas Método POST: Crea una nueva venta Debería manejar errores al crear una venta",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Venta, 'create').rejects(new Error('Error al crear la venta'));\nconst req = { body: { folioVenta: 'V003', total: 300 }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.createVenta(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear la venta',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "becaf117-6fab-4b30-996c-88280cffd16e",
                  "parentUUID": "cf82590c-33bd-4747-9da2-38908e056d4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dbca45e5-5639-4407-b564-2feaa4ebd559",
                "becaf117-6fab-4b30-996c-88280cffd16e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2bccb14-7285-464c-8f7f-9847dacf7bda",
              "title": "Método GET: Obtiene una venta por ID (FolioVenta)",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\ventasController.test.js",
              "file": "\\tests\\ventasController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener una venta por ID exitosamente",
                  "fullTitle": "Pruebas del controlador de ventas Método GET: Obtiene una venta por ID (FolioVenta) Debería obtener una venta por ID exitosamente",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockVenta = { id: 1, folioVenta: 'V001', total: 100 };\nsinon.stub(Venta, 'findById').resolves(mockVenta);\nconst req = { params: { id: '1' }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.getVentaById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockVenta\n})).to.be.true;",
                  "err": {},
                  "uuid": "17fa3a9f-68fd-4dce-acc4-77b7976ce25b",
                  "parentUUID": "a2bccb14-7285-464c-8f7f-9847dacf7bda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si la venta no existe",
                  "fullTitle": "Pruebas del controlador de ventas Método GET: Obtiene una venta por ID (FolioVenta) Debería devolver un error 404 si la venta no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Venta, 'findById').resolves(null);\nconst req = { params: { id: '999' }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.getVentaById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Operación de venta no encontrada',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "10f09b39-758f-4258-a99c-1713afc64c6f",
                  "parentUUID": "a2bccb14-7285-464c-8f7f-9847dacf7bda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17fa3a9f-68fd-4dce-acc4-77b7976ce25b",
                "10f09b39-758f-4258-a99c-1713afc64c6f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "004f5d05-2614-4d5a-8732-45c594551cb5",
              "title": "Método PUT: Actualiza una venta",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\ventasController.test.js",
              "file": "\\tests\\ventasController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería actualizar una venta exitosamente",
                  "fullTitle": "Pruebas del controlador de ventas Método PUT: Actualiza una venta Debería actualizar una venta exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ventaActualizada = { id: 1, folioVenta: 'V001', total: 150 };\nsinon.stub(Venta, 'update').resolves(ventaActualizada);\nconst req = { params: { id: '1' }, body: { total: 150 }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.updateVenta(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Venta actualizada exitosamente',\n    data: ventaActualizada\n})).to.be.true;",
                  "err": {},
                  "uuid": "b4476c1b-3db2-41d5-be61-ae3c8ec50be0",
                  "parentUUID": "004f5d05-2614-4d5a-8732-45c594551cb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si la venta no existe",
                  "fullTitle": "Pruebas del controlador de ventas Método PUT: Actualiza una venta Debería devolver un error 404 si la venta no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Venta, 'update').resolves(null);\nconst req = { params: { id: '999' }, body: { total: 150 }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.updateVenta(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Operación de venta no encontrada',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "848d4f6d-29b9-47f3-bddc-644aa1ddd6fb",
                  "parentUUID": "004f5d05-2614-4d5a-8732-45c594551cb5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4476c1b-3db2-41d5-be61-ae3c8ec50be0",
                "848d4f6d-29b9-47f3-bddc-644aa1ddd6fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e77049b-5695-4a35-9475-aa926c164040",
              "title": "Método DELETE: Elimina una venta",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\ventasController.test.js",
              "file": "\\tests\\ventasController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar una venta exitosamente",
                  "fullTitle": "Pruebas del controlador de ventas Método DELETE: Elimina una venta Debería eliminar una venta exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ventaEliminada = { id: 1, folioVenta: 'V001', total: 100 };\nsinon.stub(Venta, 'delete').resolves(ventaEliminada);\nconst req = { params: { id: '1' }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.deleteVenta(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Venta eliminada exitosamente',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "3c8daa24-f1f8-4b79-b749-2bbd8b59a249",
                  "parentUUID": "2e77049b-5695-4a35-9475-aa926c164040",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si la venta no existe",
                  "fullTitle": "Pruebas del controlador de ventas Método DELETE: Elimina una venta Debería devolver un error 404 si la venta no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Venta, 'delete').resolves(false);\nconst req = { params: { id: '999' }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.deleteVenta(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Operación de venta no encontrada',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "99a4cede-2721-45a2-82a8-1c864b082337",
                  "parentUUID": "2e77049b-5695-4a35-9475-aa926c164040",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c8daa24-f1f8-4b79-b749-2bbd8b59a249",
                "99a4cede-2721-45a2-82a8-1c864b082337"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}