{
  "stats": {
    "suites": 65,
    "tests": 106,
    "passes": 106,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-05T03:22:47.489Z",
    "end": "2024-12-05T03:22:48.549Z",
    "duration": 1060,
    "testsRegistered": 106,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cf44bf2f-1deb-4106-af76-c333b0f62b39",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fdc27695-77e0-4053-874d-f460649a77a0",
          "title": "Pruebas del controlador de clientes",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
          "file": "\\tests\\clienteControlador.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de clientes\"",
              "fullTitle": "Pruebas del controlador de clientes \"after each\" hook in \"Pruebas del controlador de clientes\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "9dac632b-1665-419a-9449-8c6b349a01eb",
              "parentUUID": "fdc27695-77e0-4053-874d-f460649a77a0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "34bef2df-e4a3-410e-b66d-4e93b3d85cb8",
              "title": "Método GET: Obtiene todos los clientes",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
              "file": "\\tests\\clienteControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los clientes exitosamente",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Obtiene todos los clientes Debería obtener todos los clientes exitosamente",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockClientes = [\n    { id: 1, nombre: 'Juan', apellido: 'Pérez' },\n    { id: 2, nombre: 'Ana', apellido: 'López' }\n];\nsinon.stub(Cliente, 'findAll').resolves(mockClientes);\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.getAllClientes(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockClientes\n})).to.be.true;",
                  "err": {},
                  "uuid": "1c60b63c-3cd0-4520-8cea-37dc5f0e949f",
                  "parentUUID": "34bef2df-e4a3-410e-b66d-4e93b3d85cb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los clientes",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Obtiene todos los clientes Debería manejar errores al obtener los clientes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Cliente, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.getAllClientes(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "49e77a86-9b9f-4c69-bb6c-985755e21be2",
                  "parentUUID": "34bef2df-e4a3-410e-b66d-4e93b3d85cb8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c60b63c-3cd0-4520-8cea-37dc5f0e949f",
                "49e77a86-9b9f-4c69-bb6c-985755e21be2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "30ea4148-4b25-41af-957e-ad5144241185",
              "title": "Método GET: Buscar clientes por todos los parámetros",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
              "file": "\\tests\\clienteControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería buscar clientes exitosamente",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Buscar clientes por todos los parámetros Debería buscar clientes exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const searchString = 'Juan';\nconst mockClientes = [{ id: 1, nombre: 'Juan', apellido: 'Pérez' }];\nsinon.stub(Cliente, 'searchAllColumns').resolves(mockClientes);\nconst req = { params: { q: searchString } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.searchAllColumns(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockClientes\n})).to.be.true;",
                  "err": {},
                  "uuid": "d8058952-63d2-4342-88fc-e2f9fab7be97",
                  "parentUUID": "30ea4148-4b25-41af-957e-ad5144241185",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Buscar clientes por todos los parámetros Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = { params: {} };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.searchAllColumns(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({\n    code: 400,\n    message: \"El parámetro 'q' es obligatorio\",\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "12007401-699b-4954-93b2-5e118cd21739",
                  "parentUUID": "30ea4148-4b25-41af-957e-ad5144241185",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8058952-63d2-4342-88fc-e2f9fab7be97",
                "12007401-699b-4954-93b2-5e118cd21739"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "99a77c76-1dce-47d5-91f0-c8fc2024125d",
              "title": "Método POST: Crea un nuevo cliente",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
              "file": "\\tests\\clienteControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear un cliente exitosamente",
                  "fullTitle": "Pruebas del controlador de clientes Método POST: Crea un nuevo cliente Debería crear un cliente exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nuevoCliente = { id: 1, nombre: 'Carlos', apellido: 'Sánchez' };\nsinon.stub(Cliente, 'create').resolves(nuevoCliente);\nconst req = { body: { nombre: 'Carlos', apellido: 'Sánchez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.createCliente(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'Cliente creado exitosamente',\n    data: nuevoCliente\n})).to.be.true;",
                  "err": {},
                  "uuid": "4b91d4ef-bd6b-400b-ac28-c40a6a37f3cc",
                  "parentUUID": "99a77c76-1dce-47d5-91f0-c8fc2024125d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear un cliente",
                  "fullTitle": "Pruebas del controlador de clientes Método POST: Crea un nuevo cliente Debería manejar errores al crear un cliente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Cliente, 'create').rejects(new Error('Error al crear el cliente'));\nconst req = { body: { nombre: 'Carlos', apellido: 'Sánchez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.createCliente(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear el cliente',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "25e1ec3c-032c-4606-b2e6-e75db374285f",
                  "parentUUID": "99a77c76-1dce-47d5-91f0-c8fc2024125d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b91d4ef-bd6b-400b-ac28-c40a6a37f3cc",
                "25e1ec3c-032c-4606-b2e6-e75db374285f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b40a75bb-ccae-43e9-b570-dc16b7b0545a",
              "title": "Método GET: Obtiene un cliente por ID",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
              "file": "\\tests\\clienteControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener un cliente por ID exitosamente",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Obtiene un cliente por ID Debería obtener un cliente por ID exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockCliente = { id: 1, nombre: 'Juan', apellido: 'Pérez' };\nsinon.stub(Cliente, 'findById').resolves(mockCliente);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.getClienteById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockCliente\n})).to.be.true;",
                  "err": {},
                  "uuid": "57843687-f0c9-4b27-9548-5ca6260833ba",
                  "parentUUID": "b40a75bb-ccae-43e9-b570-dc16b7b0545a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el cliente no existe",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Obtiene un cliente por ID Debería devolver un error 404 si el cliente no existe",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Cliente, 'findById').resolves(null);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.getClienteById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Cliente no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "d9f0ef16-6396-42b8-b0a2-146e9569577a",
                  "parentUUID": "b40a75bb-ccae-43e9-b570-dc16b7b0545a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "57843687-f0c9-4b27-9548-5ca6260833ba",
                "d9f0ef16-6396-42b8-b0a2-146e9569577a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b74b04bc-aa1c-4e2c-bf50-ea5a4b626fa3",
              "title": "Método PUT: Actualiza un cliente",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
              "file": "\\tests\\clienteControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería actualizar un cliente exitosamente",
                  "fullTitle": "Pruebas del controlador de clientes Método PUT: Actualiza un cliente Debería actualizar un cliente exitosamente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const clienteActualizado = { id: 1, nombre: 'Juan', apellido: 'Pérez' };\nsinon.stub(Cliente, 'update').resolves(clienteActualizado);\nconst req = { params: { id: '1' }, body: { nombre: 'Juan', apellido: 'Pérez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.updateCliente(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Cliente actualizado exitosamente',\n    data: clienteActualizado\n})).to.be.true;",
                  "err": {},
                  "uuid": "357b05d6-90fa-4436-a832-66ca097347c2",
                  "parentUUID": "b74b04bc-aa1c-4e2c-bf50-ea5a4b626fa3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el cliente no existe",
                  "fullTitle": "Pruebas del controlador de clientes Método PUT: Actualiza un cliente Debería devolver un error 404 si el cliente no existe",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Cliente, 'update').resolves(null);\nconst req = { params: { id: '999' }, body: { nombre: 'Juan', apellido: 'Pérez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.updateCliente(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Cliente no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "ba2e391c-2362-4689-b736-e6af8785027d",
                  "parentUUID": "b74b04bc-aa1c-4e2c-bf50-ea5a4b626fa3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "357b05d6-90fa-4436-a832-66ca097347c2",
                "ba2e391c-2362-4689-b736-e6af8785027d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a5188c16-0660-4628-a0dd-9c1b4ebb7643",
              "title": "Método DELETE: Elimina un cliente",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
              "file": "\\tests\\clienteControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar un cliente exitosamente",
                  "fullTitle": "Pruebas del controlador de clientes Método DELETE: Elimina un cliente Debería eliminar un cliente exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const clienteEliminado = { id: 1, nombre: 'Juan', apellido: 'Pérez' };\nsinon.stub(Cliente, 'delete').resolves(clienteEliminado);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.deleteCliente(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Cliente eliminado exitosamente',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "f996e7a6-01cd-4048-a95e-41bcfdf1b66a",
                  "parentUUID": "a5188c16-0660-4628-a0dd-9c1b4ebb7643",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el cliente no existe",
                  "fullTitle": "Pruebas del controlador de clientes Método DELETE: Elimina un cliente Debería devolver un error 404 si el cliente no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Cliente, 'delete').resolves(false);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.deleteCliente(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Cliente no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "b718afa8-06e5-4b27-bae6-bd3ff534eb0f",
                  "parentUUID": "a5188c16-0660-4628-a0dd-9c1b4ebb7643",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f996e7a6-01cd-4048-a95e-41bcfdf1b66a",
                "b718afa8-06e5-4b27-bae6-bd3ff534eb0f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8674e176-bd25-499e-9a76-993aa25bbc22",
              "title": "Método GET: Descargar clientes en formato Excel",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\clienteControlador.test.js",
              "file": "\\tests\\clienteControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería generar y descargar el archivo Excel exitosamente",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Descargar clientes en formato Excel Debería generar y descargar el archivo Excel exitosamente",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockClientes = [\n    { id: 1, nombre: 'Juan', apellido: 'Pérez' },\n    { id: 2, nombre: 'Ana', apellido: 'López' }\n];\nsinon.stub(Cliente, 'generarExcel').resolves(mockClientes);\nsinon.stub(excel, 'write').returns(Buffer.from('test'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    setHeader: sinon.stub(),\n    send: sinon.stub()\n};\nawait ClienteController.downloadClientesExcel(req, res);\nexpect(res.setHeader.calledWith('Content-Disposition', 'attachment; filename=clientes.xlsx')).to.be.true;\nexpect(res.setHeader.calledWith('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')).to.be.true;\nexpect(res.send.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "c6bf78cd-473e-477c-ae7e-5527a3812dc7",
                  "parentUUID": "8674e176-bd25-499e-9a76-993aa25bbc22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al generar el archivo Excel",
                  "fullTitle": "Pruebas del controlador de clientes Método GET: Descargar clientes en formato Excel Debería manejar errores al generar el archivo Excel",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Cliente, 'generarExcel').rejects(new Error('Error al generar el archivo Excel'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ClienteController.downloadClientesExcel(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al generar el archivo Excel.',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "7aeefe94-4623-4192-8d93-810ac73f51f6",
                  "parentUUID": "8674e176-bd25-499e-9a76-993aa25bbc22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6bf78cd-473e-477c-ae7e-5527a3812dc7",
                "7aeefe94-4623-4192-8d93-810ac73f51f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "225375f7-c960-4663-817e-fb53f5d046b0",
          "title": "Pruebas del controlador de detalle de ventas",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
          "file": "\\tests\\detalleVentaControlador.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de detalle de ventas\"",
              "fullTitle": "Pruebas del controlador de detalle de ventas \"after each\" hook in \"Pruebas del controlador de detalle de ventas\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "3469daf4-1a17-48ce-975f-6ba98ea9bdf2",
              "parentUUID": "225375f7-c960-4663-817e-fb53f5d046b0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "fd0da9b0-9c0b-4df8-8a03-4e4152d63d71",
              "title": "Método GET: Obtiene todos los detalles de ventas",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
              "file": "\\tests\\detalleVentaControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los detalles de ventas exitosamente",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Obtiene todos los detalles de ventas Debería obtener todos los detalles de ventas exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockDetalleVentas = [\n    { id: 1, producto: 'Producto 1', cantidad: 10 },\n    { id: 2, producto: 'Producto 2', cantidad: 20 }\n];\nsinon.stub(DetalleVenta, 'findAll').resolves(mockDetalleVentas);\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.getAllDetalleVentas(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockDetalleVentas\n})).to.be.true;",
                  "err": {},
                  "uuid": "2f597c5f-889c-426b-86de-c267a8d69cae",
                  "parentUUID": "fd0da9b0-9c0b-4df8-8a03-4e4152d63d71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los detalles de ventas",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Obtiene todos los detalles de ventas Debería manejar errores al obtener los detalles de ventas",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(DetalleVenta, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.getAllDetalleVentas(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "09d8bd3a-6bd5-4e3a-a2ee-3d1286ebef14",
                  "parentUUID": "fd0da9b0-9c0b-4df8-8a03-4e4152d63d71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2f597c5f-889c-426b-86de-c267a8d69cae",
                "09d8bd3a-6bd5-4e3a-a2ee-3d1286ebef14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "706bc7fa-ced7-471c-a6df-08605c30a2dd",
              "title": "Método GET: Buscar detalles de ventas por todos los parámetros",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
              "file": "\\tests\\detalleVentaControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería buscar detalles de ventas exitosamente",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Buscar detalles de ventas por todos los parámetros Debería buscar detalles de ventas exitosamente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const searchString = 'Producto 1';\nconst mockDetalleVentas = [{ id: 1, producto: 'Producto 1', cantidad: 10 }];\nsinon.stub(DetalleVenta, 'searchAllColumns').resolves(mockDetalleVentas);\nconst req = { params: { q: searchString } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.searchAllColumnsDetalleVentas(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockDetalleVentas\n})).to.be.true;",
                  "err": {},
                  "uuid": "4c4052c2-a67c-47c3-bf1c-57204389a925",
                  "parentUUID": "706bc7fa-ced7-471c-a6df-08605c30a2dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Buscar detalles de ventas por todos los parámetros Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = { params: {} };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.searchAllColumnsDetalleVentas(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({\n    code: 400,\n    message: \"El parámetro 'q' es obligatorio\",\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "2261b3ed-9cbb-4abc-a089-d3bce45fbf32",
                  "parentUUID": "706bc7fa-ced7-471c-a6df-08605c30a2dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c4052c2-a67c-47c3-bf1c-57204389a925",
                "2261b3ed-9cbb-4abc-a089-d3bce45fbf32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "28670020-a27c-4b4e-ae4d-3c1b43b70b7e",
              "title": "Método POST: Crea un nuevo detalle de venta",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
              "file": "\\tests\\detalleVentaControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear un detalle de venta exitosamente",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método POST: Crea un nuevo detalle de venta Debería crear un detalle de venta exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nuevoDetalleVenta = { id: 1, producto: 'Producto 1', cantidad: 10 };\nsinon.stub(DetalleVenta, 'create').resolves(nuevoDetalleVenta);\nconst req = { body: { producto: 'Producto 1', cantidad: 10 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.createDetalleVenta(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'El detalle de venta fue creado exitosamente',\n    data: nuevoDetalleVenta\n})).to.be.true;",
                  "err": {},
                  "uuid": "e62d9784-17a1-4e8c-8a66-ae56560411b4",
                  "parentUUID": "28670020-a27c-4b4e-ae4d-3c1b43b70b7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear un detalle de venta",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método POST: Crea un nuevo detalle de venta Debería manejar errores al crear un detalle de venta",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(DetalleVenta, 'create').rejects(new Error('Error al crear el detalle de venta'));\nconst req = { body: { producto: 'Producto 1', cantidad: 10 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.createDetalleVenta(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear el detalle de venta',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "ab001ead-8c7b-480d-b0ab-8c5baa61c597",
                  "parentUUID": "28670020-a27c-4b4e-ae4d-3c1b43b70b7e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e62d9784-17a1-4e8c-8a66-ae56560411b4",
                "ab001ead-8c7b-480d-b0ab-8c5baa61c597"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6ee6098f-56b3-4bb0-82e3-1a19b1753789",
              "title": "Método GET: Obtiene un detalle de venta por ID",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
              "file": "\\tests\\detalleVentaControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener un detalle de venta por ID exitosamente",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Obtiene un detalle de venta por ID Debería obtener un detalle de venta por ID exitosamente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockDetalleVenta = { id: 1, producto: 'Producto 1', cantidad: 10 };\nsinon.stub(DetalleVenta, 'findById').resolves(mockDetalleVenta);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.getDetalleVentaById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockDetalleVenta\n})).to.be.true;",
                  "err": {},
                  "uuid": "e292431f-4215-4db7-a53c-5f5ebb41bf0f",
                  "parentUUID": "6ee6098f-56b3-4bb0-82e3-1a19b1753789",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el detalle de venta no existe",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Obtiene un detalle de venta por ID Debería devolver un error 404 si el detalle de venta no existe",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(DetalleVenta, 'findById').resolves(null);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.getDetalleVentaById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Detalle de venta no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "9757431c-f410-4900-a210-181d088ccfa0",
                  "parentUUID": "6ee6098f-56b3-4bb0-82e3-1a19b1753789",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e292431f-4215-4db7-a53c-5f5ebb41bf0f",
                "9757431c-f410-4900-a210-181d088ccfa0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0fdf3dcb-b239-4f3b-9ff3-0613fb6dd8be",
              "title": "Método PUT: Actualiza un detalle de venta",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
              "file": "\\tests\\detalleVentaControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería actualizar un detalle de venta exitosamente",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método PUT: Actualiza un detalle de venta Debería actualizar un detalle de venta exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const detalleVentaActualizado = { id: 1, producto: 'Producto 1', cantidad: 15 };\nsinon.stub(DetalleVenta, 'update').resolves(detalleVentaActualizado);\nconst req = { params: { id: '1' }, body: { producto: 'Producto 1', cantidad: 15 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.updateDetalleVenta(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'El Detalle de venta fue actualizado exitosamente',\n    data: detalleVentaActualizado\n})).to.be.true;",
                  "err": {},
                  "uuid": "7150bcb5-4565-423a-af3e-6b465ad76b17",
                  "parentUUID": "0fdf3dcb-b239-4f3b-9ff3-0613fb6dd8be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el detalle de venta no existe",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método PUT: Actualiza un detalle de venta Debería devolver un error 404 si el detalle de venta no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(DetalleVenta, 'update').resolves(null);\nconst req = { params: { id: '999' }, body: { producto: 'Producto 1', cantidad: 15 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.updateDetalleVenta(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'El Detalle de venta no fue encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "f1998c38-5ae3-40a1-8541-a06e95761617",
                  "parentUUID": "0fdf3dcb-b239-4f3b-9ff3-0613fb6dd8be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7150bcb5-4565-423a-af3e-6b465ad76b17",
                "f1998c38-5ae3-40a1-8541-a06e95761617"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d52bd88-181f-43be-a71c-31789b246da0",
              "title": "Método DELETE: Elimina un detalle de venta",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
              "file": "\\tests\\detalleVentaControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar un detalle de venta exitosamente",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método DELETE: Elimina un detalle de venta Debería eliminar un detalle de venta exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const detalleVentaEliminado = { id: 1, producto: 'Producto 1', cantidad: 10 };\nsinon.stub(DetalleVenta, 'delete').resolves(detalleVentaEliminado);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.deleteDetalleVenta(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Detalle de venta eliminado exitosamente',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "8195168c-f937-4f03-ad45-ba1762a04b13",
                  "parentUUID": "4d52bd88-181f-43be-a71c-31789b246da0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el detalle de venta no existe",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método DELETE: Elimina un detalle de venta Debería devolver un error 404 si el detalle de venta no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(DetalleVenta, 'delete').resolves(false);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.deleteDetalleVenta(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Detalle de venta no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "30ec0c91-10e0-46de-b927-c42469d168e8",
                  "parentUUID": "4d52bd88-181f-43be-a71c-31789b246da0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8195168c-f937-4f03-ad45-ba1762a04b13",
                "30ec0c91-10e0-46de-b927-c42469d168e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "82bb6a7b-40ca-43ae-951c-2a3fe0384eb9",
              "title": "Método GET: Descargar detalle de ventas en Excel",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\detalleVentaControlador.test.js",
              "file": "\\tests\\detalleVentaControlador.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería generar y descargar el archivo Excel exitosamente",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Descargar detalle de ventas en Excel Debería generar y descargar el archivo Excel exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockDetalleVentas = [\n    { id: 1, producto: 'Producto 1', cantidad: 10 },\n    { id: 2, producto: 'Producto 2', cantidad: 20 }\n];\nsinon.stub(DetalleVenta, 'generarExcel').resolves(mockDetalleVentas);\nsinon.stub(excel, 'write').returns(Buffer.from('test'));\nconst req = {};\nconst res = {\n    setHeader: sinon.stub(),\n    send: sinon.stub()\n};\nawait DetalleVentaController.downloadDetalleVentasExcel(req, res);\nexpect(res.setHeader.calledWith('Content-Disposition', 'attachment; filename=detalle_ventas.xlsx')).to.be.true;\nexpect(res.setHeader.calledWith('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')).to.be.true;\nexpect(res.send.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "406cc3c4-8e83-430a-84f5-0d242c695405",
                  "parentUUID": "82bb6a7b-40ca-43ae-951c-2a3fe0384eb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al generar el archivo Excel",
                  "fullTitle": "Pruebas del controlador de detalle de ventas Método GET: Descargar detalle de ventas en Excel Debería manejar errores al generar el archivo Excel",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(DetalleVenta, 'generarExcel').rejects(new Error('Error al generar el archivo Excel'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait DetalleVentaController.downloadDetalleVentasExcel(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al generar el archivo Excel.',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "0a782eac-7339-4564-b240-8b00ada32c48",
                  "parentUUID": "82bb6a7b-40ca-43ae-951c-2a3fe0384eb9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "406cc3c4-8e83-430a-84f5-0d242c695405",
                "0a782eac-7339-4564-b240-8b00ada32c48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "72b07fb7-4b2b-4a0b-a5e1-2a2bde825849",
          "title": "Pruebas del controlador de empleados",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
          "file": "\\tests\\empleadosController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de empleados\"",
              "fullTitle": "Pruebas del controlador de empleados \"after each\" hook in \"Pruebas del controlador de empleados\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "7d57ad56-134b-4120-8bd3-b20fd8c96573",
              "parentUUID": "72b07fb7-4b2b-4a0b-a5e1-2a2bde825849",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "8d940425-2499-4d1b-acdc-bc8466cb8ad9",
              "title": "Método GET: Obtener todos los empleados",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
              "file": "\\tests\\empleadosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los empleados exitosamente",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Obtener todos los empleados Debería obtener todos los empleados exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockEmpleados = [\n    { id: 1, nombre: 'Juan', apellido: 'Pérez' },\n    { id: 2, nombre: 'Ana', apellido: 'Gómez' }\n];\nsinon.stub(Empleado, 'findAll').resolves(mockEmpleados);\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.getAllEmpleados(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockEmpleados\n})).to.be.true;",
                  "err": {},
                  "uuid": "55f70d25-865d-4ff2-9839-b6d6d1e03560",
                  "parentUUID": "8d940425-2499-4d1b-acdc-bc8466cb8ad9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los empleados",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Obtener todos los empleados Debería manejar errores al obtener los empleados",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Empleado, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.getAllEmpleados(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "3c1f215e-a29d-4a61-ac3a-503a421aa124",
                  "parentUUID": "8d940425-2499-4d1b-acdc-bc8466cb8ad9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55f70d25-865d-4ff2-9839-b6d6d1e03560",
                "3c1f215e-a29d-4a61-ac3a-503a421aa124"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9544f31e-4cdd-48f4-8f3f-82524aa58408",
              "title": "Método GET: Buscar empleados por todos los parámetros",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
              "file": "\\tests\\empleadosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería buscar empleados exitosamente",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Buscar empleados por todos los parámetros Debería buscar empleados exitosamente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const searchString = 'Juan';\nconst mockEmpleados = [{ id: 1, nombre: 'Juan', apellido: 'Pérez' }];\nsinon.stub(Empleado, 'searchAllColumns').resolves(mockEmpleados);\nconst req = { params: { q: searchString } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.searchAllColumns(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockEmpleados\n})).to.be.true;",
                  "err": {},
                  "uuid": "392d3223-6d02-43c9-a6e0-8ae87ec84e46",
                  "parentUUID": "9544f31e-4cdd-48f4-8f3f-82524aa58408",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Buscar empleados por todos los parámetros Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = { params: {} };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.searchAllColumns(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({\n    code: 400,\n    message: \"El parámetro 'q' es obligatorio\",\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "57d91859-14c6-41ab-90cd-4832669fd96a",
                  "parentUUID": "9544f31e-4cdd-48f4-8f3f-82524aa58408",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "392d3223-6d02-43c9-a6e0-8ae87ec84e46",
                "57d91859-14c6-41ab-90cd-4832669fd96a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "367cb7e9-3792-4dcd-837f-d6408f5830c8",
              "title": "Método POST: Crear un nuevo empleado",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
              "file": "\\tests\\empleadosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear un empleado exitosamente",
                  "fullTitle": "Pruebas del controlador de empleados Método POST: Crear un nuevo empleado Debería crear un empleado exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nuevoEmpleado = { id: 1, nombre: 'Juan', apellido: 'Pérez' };\nsinon.stub(Empleado, 'create').resolves(nuevoEmpleado);\nconst req = { body: { nombre: 'Juan', apellido: 'Pérez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.createEmpleado(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'Empleado creado exitosamente',\n    data: nuevoEmpleado\n})).to.be.true;",
                  "err": {},
                  "uuid": "3a810c24-688b-4aa2-8a14-84714497cb0d",
                  "parentUUID": "367cb7e9-3792-4dcd-837f-d6408f5830c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear un empleado",
                  "fullTitle": "Pruebas del controlador de empleados Método POST: Crear un nuevo empleado Debería manejar errores al crear un empleado",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Empleado, 'create').rejects(new Error('Error al crear el empleado'));\nconst req = { body: { nombre: 'Juan', apellido: 'Pérez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.createEmpleado(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear el empleado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "52550a08-54f1-4054-b2ad-d6e8c56a690f",
                  "parentUUID": "367cb7e9-3792-4dcd-837f-d6408f5830c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a810c24-688b-4aa2-8a14-84714497cb0d",
                "52550a08-54f1-4054-b2ad-d6e8c56a690f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3f2e719c-2304-4aca-bfff-83f291ca3244",
              "title": "Método GET: Obtener un empleado por ID",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
              "file": "\\tests\\empleadosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener un empleado por ID exitosamente",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Obtener un empleado por ID Debería obtener un empleado por ID exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockEmpleado = { id: 1, nombre: 'Juan', apellido: 'Pérez' };\nsinon.stub(Empleado, 'findById').resolves(mockEmpleado);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.getEmpleadoById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockEmpleado\n})).to.be.true;",
                  "err": {},
                  "uuid": "aa027b5f-a9d3-4022-b099-5aaadb750849",
                  "parentUUID": "3f2e719c-2304-4aca-bfff-83f291ca3244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el empleado no existe",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Obtener un empleado por ID Debería devolver un error 404 si el empleado no existe",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Empleado, 'findById').resolves(null);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.getEmpleadoById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Empleado no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "9b00ee38-d6f8-4ce0-b5c8-11a8e00c8563",
                  "parentUUID": "3f2e719c-2304-4aca-bfff-83f291ca3244",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa027b5f-a9d3-4022-b099-5aaadb750849",
                "9b00ee38-d6f8-4ce0-b5c8-11a8e00c8563"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "35b71b2b-181a-4fc6-a648-f5d833951c11",
              "title": "Método PUT: Actualizar un empleado",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
              "file": "\\tests\\empleadosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería actualizar un empleado exitosamente",
                  "fullTitle": "Pruebas del controlador de empleados Método PUT: Actualizar un empleado Debería actualizar un empleado exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const empleadoActualizado = { id: 1, nombre: 'Juan', apellido: 'Pérez' };\nsinon.stub(Empleado, 'update').resolves(empleadoActualizado);\nconst req = { params: { id: '1' }, body: { nombre: 'Juan', apellido: 'Pérez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.updateEmpleado(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Empleado actualizado exitosamente',\n    data: empleadoActualizado\n})).to.be.true;",
                  "err": {},
                  "uuid": "78e76f0a-176e-4854-9177-b42f3e7341cf",
                  "parentUUID": "35b71b2b-181a-4fc6-a648-f5d833951c11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el empleado no existe",
                  "fullTitle": "Pruebas del controlador de empleados Método PUT: Actualizar un empleado Debería devolver un error 404 si el empleado no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Empleado, 'update').resolves(null);\nconst req = { params: { id: '999' }, body: { nombre: 'Juan', apellido: 'Pérez' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.updateEmpleado(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Empleado no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "e5dcc35e-d3f2-498d-a8f5-14a967f0a402",
                  "parentUUID": "35b71b2b-181a-4fc6-a648-f5d833951c11",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78e76f0a-176e-4854-9177-b42f3e7341cf",
                "e5dcc35e-d3f2-498d-a8f5-14a967f0a402"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb5af656-5991-41ab-aeda-c0fab46d824a",
              "title": "Método DELETE: Eliminar un empleado",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
              "file": "\\tests\\empleadosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar un empleado exitosamente",
                  "fullTitle": "Pruebas del controlador de empleados Método DELETE: Eliminar un empleado Debería eliminar un empleado exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const empleadoEliminado = { id: 1, nombre: 'Juan', apellido: 'Pérez' };\nsinon.stub(Empleado, 'delete').resolves(empleadoEliminado);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.deleteEmpleado(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Empleado eliminado exitosamente',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "3e220962-3ed6-4235-83a1-ded1b9eaf397",
                  "parentUUID": "bb5af656-5991-41ab-aeda-c0fab46d824a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el empleado no existe",
                  "fullTitle": "Pruebas del controlador de empleados Método DELETE: Eliminar un empleado Debería devolver un error 404 si el empleado no existe",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Empleado, 'delete').resolves(false);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.deleteEmpleado(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Empleado no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "bb939e60-ccfa-4f22-a3e8-281aefc54be4",
                  "parentUUID": "bb5af656-5991-41ab-aeda-c0fab46d824a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e220962-3ed6-4235-83a1-ded1b9eaf397",
                "bb939e60-ccfa-4f22-a3e8-281aefc54be4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "adfddfd6-1c7e-4cee-b79f-103a2ccdce79",
              "title": "Método GET: Descargar empleados en Excel",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\empleadosController.test.js",
              "file": "\\tests\\empleadosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería generar y descargar el archivo Excel exitosamente",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Descargar empleados en Excel Debería generar y descargar el archivo Excel exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockEmpleados = [\n    { id: 1, nombre: 'Juan', apellido: 'Pérez' },\n    { id: 2, nombre: 'Ana', apellido: 'Gómez' }\n];\nsinon.stub(Empleado, 'generarExcel').resolves(mockEmpleados);\nsinon.stub(excel, 'write').returns(Buffer.from('test'));\nconst req = {};\nconst res = {\n    setHeader: sinon.stub(),\n    send: sinon.stub()\n};\nawait EmpleadoController.downloadEmpleadosExcel(req, res);\nexpect(res.setHeader.calledWith('Content-Disposition', 'attachment; filename=empleados.xlsx')).to.be.true;\nexpect(res.setHeader.calledWith('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')).to.be.true;\nexpect(res.send.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "41acddf0-2365-43a9-9264-70f799526210",
                  "parentUUID": "adfddfd6-1c7e-4cee-b79f-103a2ccdce79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al generar el archivo Excel",
                  "fullTitle": "Pruebas del controlador de empleados Método GET: Descargar empleados en Excel Debería manejar errores al generar el archivo Excel",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Empleado, 'generarExcel').rejects(new Error('Error al generar el archivo Excel'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait EmpleadoController.downloadEmpleadosExcel(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al generar el archivo Excel.',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "00569405-7870-461e-9d07-ad84e87a8ba0",
                  "parentUUID": "adfddfd6-1c7e-4cee-b79f-103a2ccdce79",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41acddf0-2365-43a9-9264-70f799526210",
                "00569405-7870-461e-9d07-ad84e87a8ba0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "853f6cf6-25e3-4649-a464-0b5b8679f12c",
          "title": "Pruebas del controlador de inventarios",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\inventarioController.test.js",
          "file": "\\tests\\inventarioController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de inventarios\"",
              "fullTitle": "Pruebas del controlador de inventarios \"after each\" hook in \"Pruebas del controlador de inventarios\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e190fc89-1cd9-436b-8397-c6aee619dbe4",
              "parentUUID": "853f6cf6-25e3-4649-a464-0b5b8679f12c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "d579abd6-67d4-46cd-a45f-e32abf87b834",
              "title": "Método GET: Obtiene todos los inventarios",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\inventarioController.test.js",
              "file": "\\tests\\inventarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los inventarios exitosamente",
                  "fullTitle": "Pruebas del controlador de inventarios Método GET: Obtiene todos los inventarios Debería obtener todos los inventarios exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockInventarios = [\n    { id: 1, nombre: 'Producto 1', cantidad: 10 },\n    { id: 2, nombre: 'Producto 2', cantidad: 20 }\n];\nsinon.stub(Inventario, 'findAll').resolves(mockInventarios);\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.getAllInventario(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockInventarios\n})).to.be.true;",
                  "err": {},
                  "uuid": "39cf3aba-aabf-4fa5-a4dc-e759f6c0e8eb",
                  "parentUUID": "d579abd6-67d4-46cd-a45f-e32abf87b834",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los inventarios",
                  "fullTitle": "Pruebas del controlador de inventarios Método GET: Obtiene todos los inventarios Debería manejar errores al obtener los inventarios",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Inventario, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.getAllInventario(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "9fdcebc5-8cf9-429a-a4e3-33bf64b82d45",
                  "parentUUID": "d579abd6-67d4-46cd-a45f-e32abf87b834",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39cf3aba-aabf-4fa5-a4dc-e759f6c0e8eb",
                "9fdcebc5-8cf9-429a-a4e3-33bf64b82d45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "722dd229-a264-4a2f-b113-279c93629354",
              "title": "Método GET: Buscar inventarios por todos los parámetros",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\inventarioController.test.js",
              "file": "\\tests\\inventarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería buscar inventarios exitosamente",
                  "fullTitle": "Pruebas del controlador de inventarios Método GET: Buscar inventarios por todos los parámetros Debería buscar inventarios exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const searchString = 'Producto';\nconst mockInventarios = [{ id: 1, nombre: 'Producto 1', cantidad: 10 }];\nsinon.stub(Inventario, 'searchAllColumns').resolves(mockInventarios);\nconst req = { params: { q: searchString } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.searchAllColumns(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockInventarios\n})).to.be.true;",
                  "err": {},
                  "uuid": "1422d6b5-28ec-49bf-9288-689c0fa5ebfe",
                  "parentUUID": "722dd229-a264-4a2f-b113-279c93629354",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "fullTitle": "Pruebas del controlador de inventarios Método GET: Buscar inventarios por todos los parámetros Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = { params: {} };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.searchAllColumns(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({\n    code: 400,\n    message: \"El parámetro 'q' es obligatorio\",\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "bdb24bd5-7a0c-42c4-96eb-1294035137d6",
                  "parentUUID": "722dd229-a264-4a2f-b113-279c93629354",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1422d6b5-28ec-49bf-9288-689c0fa5ebfe",
                "bdb24bd5-7a0c-42c4-96eb-1294035137d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af4302e1-e281-4347-95fe-6c5587844c4d",
              "title": "Método POST: Crea un nuevo inventario",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\inventarioController.test.js",
              "file": "\\tests\\inventarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear un inventario exitosamente",
                  "fullTitle": "Pruebas del controlador de inventarios Método POST: Crea un nuevo inventario Debería crear un inventario exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nuevoInventario = { id: 1, nombre: 'Producto 1', cantidad: 10 };\nsinon.stub(Inventario, 'create').resolves(nuevoInventario);\nconst req = { body: { nombre: 'Producto 1', cantidad: 10 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.createInventario(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'Inventario creado exitosamente',\n    data: nuevoInventario\n})).to.be.true;",
                  "err": {},
                  "uuid": "bff0cb13-c112-46f8-ae34-24d54d11fd50",
                  "parentUUID": "af4302e1-e281-4347-95fe-6c5587844c4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear un inventario",
                  "fullTitle": "Pruebas del controlador de inventarios Método POST: Crea un nuevo inventario Debería manejar errores al crear un inventario",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Inventario, 'create').rejects(new Error('Error al crear el inventario'));\nconst req = { body: { nombre: 'Producto 1', cantidad: 10 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.createInventario(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear el inventario',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "74f205cd-8f43-4799-bd5e-307e242d21d4",
                  "parentUUID": "af4302e1-e281-4347-95fe-6c5587844c4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bff0cb13-c112-46f8-ae34-24d54d11fd50",
                "74f205cd-8f43-4799-bd5e-307e242d21d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2d12de66-734f-41de-8fa0-adb6841485ee",
              "title": "Método GET: Obtiene un inventario por ID",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\inventarioController.test.js",
              "file": "\\tests\\inventarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener un inventario por ID exitosamente",
                  "fullTitle": "Pruebas del controlador de inventarios Método GET: Obtiene un inventario por ID Debería obtener un inventario por ID exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockInventario = { id: 1, nombre: 'Producto 1', cantidad: 10 };\nsinon.stub(Inventario, 'findById').resolves(mockInventario);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.getInventarioById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockInventario\n})).to.be.true;",
                  "err": {},
                  "uuid": "9d05e078-97a2-4273-8a30-6d392601245f",
                  "parentUUID": "2d12de66-734f-41de-8fa0-adb6841485ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el inventario no existe",
                  "fullTitle": "Pruebas del controlador de inventarios Método GET: Obtiene un inventario por ID Debería devolver un error 404 si el inventario no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Inventario, 'findById').resolves(null);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.getInventarioById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Inventario no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "66cde6a4-9c6f-4609-a572-a2147898536f",
                  "parentUUID": "2d12de66-734f-41de-8fa0-adb6841485ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d05e078-97a2-4273-8a30-6d392601245f",
                "66cde6a4-9c6f-4609-a572-a2147898536f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4fb03b41-5ae7-4bc4-83ef-621a41acdc9d",
              "title": "Método PUT: Actualiza un inventario",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\inventarioController.test.js",
              "file": "\\tests\\inventarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería actualizar un inventario exitosamente",
                  "fullTitle": "Pruebas del controlador de inventarios Método PUT: Actualiza un inventario Debería actualizar un inventario exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inventarioActualizado = { id: 1, nombre: 'Producto 1', cantidad: 15 };\nsinon.stub(Inventario, 'update').resolves(inventarioActualizado);\nconst req = { params: { id: '1' }, body: { nombre: 'Producto 1', cantidad: 15 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.updateInventario(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Inventario actualizado exitosamente',\n    data: inventarioActualizado\n})).to.be.true;",
                  "err": {},
                  "uuid": "d1089427-ba7e-4751-9b49-87c0a33b709a",
                  "parentUUID": "4fb03b41-5ae7-4bc4-83ef-621a41acdc9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el inventario no existe",
                  "fullTitle": "Pruebas del controlador de inventarios Método PUT: Actualiza un inventario Debería devolver un error 404 si el inventario no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Inventario, 'update').resolves(null);\nconst req = { params: { id: '999' }, body: { nombre: 'Producto 1', cantidad: 15 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.updateInventario(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Inventario no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "c4bbe121-1284-4430-9e36-00e9dcb25511",
                  "parentUUID": "4fb03b41-5ae7-4bc4-83ef-621a41acdc9d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1089427-ba7e-4751-9b49-87c0a33b709a",
                "c4bbe121-1284-4430-9e36-00e9dcb25511"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "636ae423-3284-49e3-a293-73b2975286b4",
              "title": "Método DELETE: Elimina un inventario",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\inventarioController.test.js",
              "file": "\\tests\\inventarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar un inventario exitosamente",
                  "fullTitle": "Pruebas del controlador de inventarios Método DELETE: Elimina un inventario Debería eliminar un inventario exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inventarioEliminado = { id: 1, nombre: 'Producto 1', cantidad: 10 };\nsinon.stub(Inventario, 'delete').resolves(inventarioEliminado);\nconst req = { params: { id: '1' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.deleteInventario(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Inventario eliminado exitosamente',\n    data: inventarioEliminado\n})).to.be.true;",
                  "err": {},
                  "uuid": "cd4fa91e-00fb-4a0b-80d7-26b98243a8ec",
                  "parentUUID": "636ae423-3284-49e3-a293-73b2975286b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el inventario no existe",
                  "fullTitle": "Pruebas del controlador de inventarios Método DELETE: Elimina un inventario Debería devolver un error 404 si el inventario no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Inventario, 'delete').resolves(false);\nconst req = { params: { id: '999' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait InventarioController.deleteInventario(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Inventario no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "ceb4ccd4-1c82-4942-a437-041b15becf1c",
                  "parentUUID": "636ae423-3284-49e3-a293-73b2975286b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd4fa91e-00fb-4a0b-80d7-26b98243a8ec",
                "ceb4ccd4-1c82-4942-a437-041b15becf1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "91b5283a-dfee-453c-86cc-3a115a74997c",
          "title": "Pruebas del controlador de productos",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\productosController.test.js",
          "file": "\\tests\\productosController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de productos\"",
              "fullTitle": "Pruebas del controlador de productos \"after each\" hook in \"Pruebas del controlador de productos\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "2a71d8d3-ac35-46c8-87dd-02b7e69e3682",
              "parentUUID": "91b5283a-dfee-453c-86cc-3a115a74997c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e7f09a3b-5468-48cb-8d37-a6a291513aff",
              "title": "Método GET: Obtiene todos los productos",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\productosController.test.js",
              "file": "\\tests\\productosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los productos exitosamente",
                  "fullTitle": "Pruebas del controlador de productos Método GET: Obtiene todos los productos Debería obtener todos los productos exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockProductos = [\n    { id: 1, nombre: 'Producto A', precio: 100 },\n    { id: 2, nombre: 'Producto B', precio: 200 }\n];\nsinon.stub(Producto, 'findAll').resolves(mockProductos);\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ProductoController.getAllProductos(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockProductos\n})).to.be.true;",
                  "err": {},
                  "uuid": "5f985625-f78c-4fe6-93bb-e99d3af577fc",
                  "parentUUID": "e7f09a3b-5468-48cb-8d37-a6a291513aff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los productos",
                  "fullTitle": "Pruebas del controlador de productos Método GET: Obtiene todos los productos Debería manejar errores al obtener los productos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Producto, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ProductoController.getAllProductos(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "d7044497-0bed-4885-89ef-60861edb4d5c",
                  "parentUUID": "e7f09a3b-5468-48cb-8d37-a6a291513aff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f985625-f78c-4fe6-93bb-e99d3af577fc",
                "d7044497-0bed-4885-89ef-60861edb4d5c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8499d9fc-ccf7-4592-abe2-f7f91bdbf5e4",
              "title": "Método POST: Crea un producto",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\productosController.test.js",
              "file": "\\tests\\productosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear un producto exitosamente",
                  "fullTitle": "Pruebas del controlador de productos Método POST: Crea un producto Debería crear un producto exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nuevoProducto = { nombre: 'Producto C', precio: 300 };\nconst creadoProducto = { id: 3, ...nuevoProducto };\nsinon.stub(Producto, 'create').resolves(creadoProducto);\nconst req = { body: nuevoProducto };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ProductoController.createProducto(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'Producto creado exitosamente',\n    data: creadoProducto\n})).to.be.true;",
                  "err": {},
                  "uuid": "83710748-7e81-47e2-9134-a32c7a0e9441",
                  "parentUUID": "8499d9fc-ccf7-4592-abe2-f7f91bdbf5e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear un producto",
                  "fullTitle": "Pruebas del controlador de productos Método POST: Crea un producto Debería manejar errores al crear un producto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Producto, 'create').rejects(new Error('Error al crear el producto'));\nconst req = { body: { nombre: 'Producto D', precio: 400 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ProductoController.createProducto(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear el producto',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "8ecf34be-c506-4caa-9d88-394917968d02",
                  "parentUUID": "8499d9fc-ccf7-4592-abe2-f7f91bdbf5e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "83710748-7e81-47e2-9134-a32c7a0e9441",
                "8ecf34be-c506-4caa-9d88-394917968d02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f838befc-e71a-4756-94cb-abc4c086e623",
              "title": "Método DELETE: Elimina un producto",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\productosController.test.js",
              "file": "\\tests\\productosController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar un producto exitosamente",
                  "fullTitle": "Pruebas del controlador de productos Método DELETE: Elimina un producto Debería eliminar un producto exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Producto, 'delete').resolves(true);\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ProductoController.deleteProducto(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Producto eliminado exitosamente',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "088e34be-854c-46b6-9e7c-fdd077c7e08f",
                  "parentUUID": "f838befc-e71a-4756-94cb-abc4c086e623",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería retornar error 404 si no se encuentra el producto",
                  "fullTitle": "Pruebas del controlador de productos Método DELETE: Elimina un producto Debería retornar error 404 si no se encuentra el producto",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Producto, 'delete').resolves(false);\nconst req = { params: { id: 999 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ProductoController.deleteProducto(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Producto no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "cafe2932-fb1f-40ae-94d3-5e8f1fa5c577",
                  "parentUUID": "f838befc-e71a-4756-94cb-abc4c086e623",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al eliminar un producto",
                  "fullTitle": "Pruebas del controlador de productos Método DELETE: Elimina un producto Debería manejar errores al eliminar un producto",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Producto, 'delete').rejects(new Error('Error al eliminar el producto'));\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait ProductoController.deleteProducto(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al eliminar el producto',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "d44dd12b-0b16-40a3-b5e4-bd4357207550",
                  "parentUUID": "f838befc-e71a-4756-94cb-abc4c086e623",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "088e34be-854c-46b6-9e7c-fdd077c7e08f",
                "cafe2932-fb1f-40ae-94d3-5e8f1fa5c577",
                "d44dd12b-0b16-40a3-b5e4-bd4357207550"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cdf92bb6-f3b6-49ab-a324-fcecff98f63c",
          "title": "Pruebas del controlador de roles",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rolController.test.js",
          "file": "\\tests\\rolController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de roles\"",
              "fullTitle": "Pruebas del controlador de roles \"after each\" hook in \"Pruebas del controlador de roles\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "8e71f79a-5719-4610-8e38-ab865e98f276",
              "parentUUID": "cdf92bb6-f3b6-49ab-a324-fcecff98f63c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "f702f06f-5bc4-49c0-936f-59a18d096ca0",
              "title": "Método GET: Obtiene todos los roles",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rolController.test.js",
              "file": "\\tests\\rolController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los roles exitosamente",
                  "fullTitle": "Pruebas del controlador de roles Método GET: Obtiene todos los roles Debería obtener todos los roles exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockRoles = [\n    { id: 1, nombre: 'Admin' },\n    { id: 2, nombre: 'Usuario' }\n];\nsinon.stub(Rol, 'findAll').resolves(mockRoles);\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.getAllRol(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockRoles\n})).to.be.true;",
                  "err": {},
                  "uuid": "9f0cabd2-5e94-493d-b5c1-37583cfd08ec",
                  "parentUUID": "f702f06f-5bc4-49c0-936f-59a18d096ca0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los roles",
                  "fullTitle": "Pruebas del controlador de roles Método GET: Obtiene todos los roles Debería manejar errores al obtener los roles",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Rol, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.getAllRol(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "59bae471-6f69-4c3e-9015-c07f9782ae4d",
                  "parentUUID": "f702f06f-5bc4-49c0-936f-59a18d096ca0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f0cabd2-5e94-493d-b5c1-37583cfd08ec",
                "59bae471-6f69-4c3e-9015-c07f9782ae4d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8e96f9c3-34b5-4e5a-b892-0291a2de4231",
              "title": "Método GET: Obtiene todos los roles por un identificador",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rolController.test.js",
              "file": "\\tests\\rolController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener un rol por ID exitosamente",
                  "fullTitle": "Pruebas del controlador de roles Método GET: Obtiene todos los roles por un identificador Debería obtener un rol por ID exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockRol = { id: 1, nombre: 'Admin' };\nsinon.stub(Rol, 'findById').resolves(mockRol);\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.getRolById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockRol\n})).to.be.true;",
                  "err": {},
                  "uuid": "006536ef-82f7-4c4c-8f20-f8f3921b91e0",
                  "parentUUID": "8e96f9c3-34b5-4e5a-b892-0291a2de4231",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el rol no existe",
                  "fullTitle": "Pruebas del controlador de roles Método GET: Obtiene todos los roles por un identificador Debería devolver un error 404 si el rol no existe",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Rol, 'findById').resolves(null);\nconst req = { params: { id: 999 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.getRolById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Rol no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "80e6262b-9c68-4589-93f7-f76b78732bc6",
                  "parentUUID": "8e96f9c3-34b5-4e5a-b892-0291a2de4231",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al buscar un rol por ID",
                  "fullTitle": "Pruebas del controlador de roles Método GET: Obtiene todos los roles por un identificador Debería manejar errores al buscar un rol por ID",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Rol, 'findById').rejects(new Error('Error de base de datos'));\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.getRolById(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "c3ed5182-08d8-43f3-8ab6-875cae1de09a",
                  "parentUUID": "8e96f9c3-34b5-4e5a-b892-0291a2de4231",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "006536ef-82f7-4c4c-8f20-f8f3921b91e0",
                "80e6262b-9c68-4589-93f7-f76b78732bc6",
                "c3ed5182-08d8-43f3-8ab6-875cae1de09a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "324b328f-0f5c-4bc3-ae4f-dcc6d93917f2",
              "title": "Método POST: Crea un nuevo rol",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rolController.test.js",
              "file": "\\tests\\rolController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear un rol exitosamente",
                  "fullTitle": "Pruebas del controlador de roles Método POST: Crea un nuevo rol Debería crear un rol exitosamente",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nuevoRol = { nombre: 'Editor' };\nconst mockRolCreado = { id: 3, ...nuevoRol };\nsinon.stub(Rol, 'create').resolves(mockRolCreado);\nconst req = { body: nuevoRol };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.createRol(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'Rol creado exitosamente',\n    data: mockRolCreado\n})).to.be.true;",
                  "err": {},
                  "uuid": "3b57b7f2-7102-4636-8dca-15dce661d9ba",
                  "parentUUID": "324b328f-0f5c-4bc3-ae4f-dcc6d93917f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear un rol",
                  "fullTitle": "Pruebas del controlador de roles Método POST: Crea un nuevo rol Debería manejar errores al crear un rol",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Rol, 'create').rejects(new Error('Error al crear el rol'));\nconst req = { body: { nombre: 'Editor' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.createRol(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear el rol',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "324a86a3-1bbb-43f6-b7a3-e2cbd3b21a79",
                  "parentUUID": "324b328f-0f5c-4bc3-ae4f-dcc6d93917f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b57b7f2-7102-4636-8dca-15dce661d9ba",
                "324a86a3-1bbb-43f6-b7a3-e2cbd3b21a79"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bcdee432-b93a-468d-88f6-0db592e9a2cf",
              "title": "Método DELETE: Elimina un rol",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rolController.test.js",
              "file": "\\tests\\rolController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar un rol exitosamente",
                  "fullTitle": "Pruebas del controlador de roles Método DELETE: Elimina un rol Debería eliminar un rol exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Rol, 'delete').resolves(true);\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.deleteRol(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Rol eliminado exitosamente',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "48c6bc52-e8a1-4359-8698-5aa11dac36b9",
                  "parentUUID": "bcdee432-b93a-468d-88f6-0db592e9a2cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el rol no existe",
                  "fullTitle": "Pruebas del controlador de roles Método DELETE: Elimina un rol Debería devolver un error 404 si el rol no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Rol, 'delete').resolves(false);\nconst req = { params: { id: 999 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.deleteRol(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Rol no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "7c0bbaff-e2cb-42c9-afc0-580c047810f6",
                  "parentUUID": "bcdee432-b93a-468d-88f6-0db592e9a2cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al eliminar un rol",
                  "fullTitle": "Pruebas del controlador de roles Método DELETE: Elimina un rol Debería manejar errores al eliminar un rol",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Rol, 'delete').rejects(new Error('Error al eliminar el rol'));\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait RolController.deleteRol(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al eliminar el rol',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "3ad64e84-3549-492e-bc98-486158720e56",
                  "parentUUID": "bcdee432-b93a-468d-88f6-0db592e9a2cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "48c6bc52-e8a1-4359-8698-5aa11dac36b9",
                "7c0bbaff-e2cb-42c9-afc0-580c047810f6",
                "3ad64e84-3549-492e-bc98-486158720e56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "21cebcff-82cc-47ce-8908-b28d70774471",
          "title": "Pruebas de las RUTAS de la API de clientes, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todos los clientes",
              "fullTitle": "Pruebas de las RUTAS de la API de clientes, método GET Debería obtener todos los clientes",
              "timedOut": false,
              "duration": 735,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/clientes');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "d9b27236-0ec0-4402-aa68-4ba2fc224535",
              "parentUUID": "21cebcff-82cc-47ce-8908-b28d70774471",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9b27236-0ec0-4402-aa68-4ba2fc224535"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 735,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d52a00ef-9183-4eaf-98db-42ce136af29b",
          "title": "Pruebas de las RUTAS de la API del detalle de la venta, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todos los detalles de la venta",
              "fullTitle": "Pruebas de las RUTAS de la API del detalle de la venta, método GET Debería obtener todos los detalles de la venta",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/detalleVenta');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "53bd479e-9b3c-43d9-ad2b-ef9e62ec2531",
              "parentUUID": "d52a00ef-9183-4eaf-98db-42ce136af29b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "53bd479e-9b3c-43d9-ad2b-ef9e62ec2531"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c1a3437a-48c4-4aed-942d-8a417fa5c009",
          "title": "Pruebas de las RUTAS de la API empleados, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todos los empleados",
              "fullTitle": "Pruebas de las RUTAS de la API empleados, método GET Debería obtener todos los empleados",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/empleados');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "8492cb18-cb32-43b0-8e54-e58f024ef248",
              "parentUUID": "c1a3437a-48c4-4aed-942d-8a417fa5c009",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8492cb18-cb32-43b0-8e54-e58f024ef248"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e1fcfce1-1a1c-4b5a-bc59-0966169503cf",
          "title": "Pruebas de las RUTAS de la API de inventarios, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todo el inventario",
              "fullTitle": "Pruebas de las RUTAS de la API de inventarios, método GET Debería obtener todo el inventario",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/inventario');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "bd08e0f2-3029-408c-9067-d24d2ce5a172",
              "parentUUID": "e1fcfce1-1a1c-4b5a-bc59-0966169503cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bd08e0f2-3029-408c-9067-d24d2ce5a172"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "beede287-b8f1-4963-ba17-13dc9fa36e47",
          "title": "Pruebas de las RUTAS de la API de productos, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todo los productos",
              "fullTitle": "Pruebas de las RUTAS de la API de productos, método GET Debería obtener todo los productos",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/productos');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "e5e669b8-c174-4856-85a6-65b1c8980826",
              "parentUUID": "beede287-b8f1-4963-ba17-13dc9fa36e47",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e5e669b8-c174-4856-85a6-65b1c8980826"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3e090738-f8c8-4c8e-9d1c-fc48331e3267",
          "title": "Pruebas de las RUTAS de la API sobre los roles, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todo los roles",
              "fullTitle": "Pruebas de las RUTAS de la API sobre los roles, método GET Debería obtener todo los roles",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/rol');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "2b6a9178-47c8-4910-973c-a4e84faa97e7",
              "parentUUID": "3e090738-f8c8-4c8e-9d1c-fc48331e3267",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b6a9178-47c8-4910-973c-a4e84faa97e7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "20663802-0530-4a60-9562-749bc867063a",
          "title": "Pruebas de las RUTAS de la API sobre los tipos de productos que existen, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todo los tipos de productos",
              "fullTitle": "Pruebas de las RUTAS de la API sobre los tipos de productos que existen, método GET Debería obtener todo los tipos de productos",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/tipoProducto');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "bdaf54fd-bc24-4f5a-8e87-85e066064b0e",
              "parentUUID": "20663802-0530-4a60-9562-749bc867063a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bdaf54fd-bc24-4f5a-8e87-85e066064b0e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f887eb77-20e0-4ddd-bd03-28be01ec1645",
          "title": "Pruebas de las RUTAS de la API sobre los usuarios, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todo los usuarios",
              "fullTitle": "Pruebas de las RUTAS de la API sobre los usuarios, método GET Debería obtener todo los usuarios",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = 'powerclean'; // Sustituye por un token válido\nconst response = await supertest(app)\n  .get('/api/usuarios')\n  .set('Authorization', `Bearer ${token}`);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "99101704-e2e8-4c45-91b7-2955927d0284",
              "parentUUID": "f887eb77-20e0-4ddd-bd03-28be01ec1645",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "99101704-e2e8-4c45-91b7-2955927d0284"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "938b7295-09bf-42e2-93cc-ac8b04352352",
          "title": "Pruebas de las RUTAS de la API sobre todas las ventas, método GET",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\rutas.test.js",
          "file": "\\tests\\rutas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Debería obtener todo las ventas",
              "fullTitle": "Pruebas de las RUTAS de la API sobre todas las ventas, método GET Debería obtener todo las ventas",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await supertest(app).get('/api/venta');\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('data').that.is.an('array');",
              "err": {},
              "uuid": "b3a2419c-650b-46ea-9a9b-6ee25463e067",
              "parentUUID": "938b7295-09bf-42e2-93cc-ac8b04352352",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3a2419c-650b-46ea-9a9b-6ee25463e067"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9db45083-e985-417a-b443-04c40e5c5c99",
          "title": "Pruebas del controlador de tipos de productos",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\tipoProductoController.test.js",
          "file": "\\tests\\tipoProductoController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de tipos de productos\"",
              "fullTitle": "Pruebas del controlador de tipos de productos \"after each\" hook in \"Pruebas del controlador de tipos de productos\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a4a34e8a-8d14-4119-894d-d75d29ca52cf",
              "parentUUID": "9db45083-e985-417a-b443-04c40e5c5c99",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "97613429-e543-4dc5-9217-492d611bc11d",
              "title": "Método GET: Obtiene todos los tipos de productos",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\tipoProductoController.test.js",
              "file": "\\tests\\tipoProductoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los tipos de productos exitosamente",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método GET: Obtiene todos los tipos de productos Debería obtener todos los tipos de productos exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockTipoProductos = [\n    { id: 1, nombre: 'Electrónica' },\n    { id: 2, nombre: 'Ropa' }\n];\nsinon.stub(TipoProducto, 'findAll').resolves(mockTipoProductos);\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.getAllTipoProductos(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockTipoProductos\n})).to.be.true;",
                  "err": {},
                  "uuid": "375e5265-3d79-4f79-af99-927ddb835f50",
                  "parentUUID": "97613429-e543-4dc5-9217-492d611bc11d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los tipos de productos",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método GET: Obtiene todos los tipos de productos Debería manejar errores al obtener los tipos de productos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(TipoProducto, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.getAllTipoProductos(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "4fa49696-ec47-4906-97b8-55371db33c74",
                  "parentUUID": "97613429-e543-4dc5-9217-492d611bc11d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "375e5265-3d79-4f79-af99-927ddb835f50",
                "4fa49696-ec47-4906-97b8-55371db33c74"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "27c87797-f23b-4638-81aa-2a67a9738b56",
              "title": "Método GET: Obtiene un tipo de producto por ID",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\tipoProductoController.test.js",
              "file": "\\tests\\tipoProductoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener un tipo de producto por ID exitosamente",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método GET: Obtiene un tipo de producto por ID Debería obtener un tipo de producto por ID exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockTipoProducto = { id: 1, nombre: 'Electrónica' };\nsinon.stub(TipoProducto, 'findById').resolves(mockTipoProducto);\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.getTipoProductoById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockTipoProducto\n})).to.be.true;",
                  "err": {},
                  "uuid": "69cfe608-be69-4913-8da4-59be84065228",
                  "parentUUID": "27c87797-f23b-4638-81aa-2a67a9738b56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el tipo de producto no existe",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método GET: Obtiene un tipo de producto por ID Debería devolver un error 404 si el tipo de producto no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(TipoProducto, 'findById').resolves(null);\nconst req = { params: { id: 999 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.getTipoProductoById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Tipo de producto no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "ce3d6fd9-c2f0-4a6a-baa6-8da2b6b99ebb",
                  "parentUUID": "27c87797-f23b-4638-81aa-2a67a9738b56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener un tipo de producto por ID",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método GET: Obtiene un tipo de producto por ID Debería manejar errores al obtener un tipo de producto por ID",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(TipoProducto, 'findById').rejects(new Error('Error de base de datos'));\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.getTipoProductoById(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "1ff8922e-a025-45dd-af15-d7ab747d0a39",
                  "parentUUID": "27c87797-f23b-4638-81aa-2a67a9738b56",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69cfe608-be69-4913-8da4-59be84065228",
                "ce3d6fd9-c2f0-4a6a-baa6-8da2b6b99ebb",
                "1ff8922e-a025-45dd-af15-d7ab747d0a39"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "837cd214-3ce4-432b-bb38-4abc8b1c1373",
              "title": "Método POST: Crea un nuevo tipo de producto",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\tipoProductoController.test.js",
              "file": "\\tests\\tipoProductoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear un tipo de producto exitosamente",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método POST: Crea un nuevo tipo de producto Debería crear un tipo de producto exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock de la respuesta esperada\nconst nuevoTipoProducto = { id: 1, nombre: 'Michelln el de las llantas xd' };\nsinon.stub(TipoProducto, 'create').resolves(nuevoTipoProducto); // Simulamos la creación del tipo de producto\n    \nconst req = { body: { nombre: 'Electrónica' } }; // El cuerpo de la solicitud\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\n    \nawait TipoProductoController.createTipoProducto(req, res);\n    \n// Verifica que se haya llamado con el código 201 y los datos correctos\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'El tipo de producto fue creado exitosamente',\n    data: nuevoTipoProducto\n})).to.be.true;",
                  "err": {},
                  "uuid": "30858cab-a8f9-4218-8b2e-fe3e06a55d83",
                  "parentUUID": "837cd214-3ce4-432b-bb38-4abc8b1c1373",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear un tipo de producto",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método POST: Crea un nuevo tipo de producto Debería manejar errores al crear un tipo de producto",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(TipoProducto, 'create').rejects(new Error('Error al crear el tipo de producto'));\nconst req = { body: { nombre: 'Electrónica' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.createTipoProducto(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear el tipo de producto',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "acd2bd18-d5f6-4dc0-88f5-c580dd6025ea",
                  "parentUUID": "837cd214-3ce4-432b-bb38-4abc8b1c1373",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30858cab-a8f9-4218-8b2e-fe3e06a55d83",
                "acd2bd18-d5f6-4dc0-88f5-c580dd6025ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7d17647-de7e-4f84-90fb-d2b7886848cd",
              "title": "Método DELETE: Elimina un tipo de producto",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\tipoProductoController.test.js",
              "file": "\\tests\\tipoProductoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar un tipo de producto exitosamente",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método DELETE: Elimina un tipo de producto Debería eliminar un tipo de producto exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tipoProductoEliminado = { id: 1, nombre: 'Producto A' };  // Simulamos el objeto eliminado\nsinon.stub(TipoProducto, 'delete').resolves(tipoProductoEliminado);  // Devuelve el objeto eliminado\n        \nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\n        \nawait TipoProductoController.deleteTipoProducto(req, res);\n        \nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Tipo de producto eliminado exitosamente',\n    data: tipoProductoEliminado  // Aseguramos que se devuelva el objeto eliminado\n})).to.be.true;",
                  "err": {},
                  "uuid": "2339fcd5-c5a2-45f8-8b43-5bb4cb5c717c",
                  "parentUUID": "e7d17647-de7e-4f84-90fb-d2b7886848cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si el tipo de producto no existe",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método DELETE: Elimina un tipo de producto Debería devolver un error 404 si el tipo de producto no existe",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(TipoProducto, 'delete').resolves(false);\nconst req = { params: { id: 999 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.deleteTipoProducto(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Tipo de producto no encontrado',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "a99a84ff-f780-4406-94b1-2e36c1b88e66",
                  "parentUUID": "e7d17647-de7e-4f84-90fb-d2b7886848cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al eliminar un tipo de producto",
                  "fullTitle": "Pruebas del controlador de tipos de productos Método DELETE: Elimina un tipo de producto Debería manejar errores al eliminar un tipo de producto",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(TipoProducto, 'delete').rejects(new Error('Error al eliminar el tipo de producto'));\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait TipoProductoController.deleteTipoProducto(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al eliminar el tipo de producto',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "1e575537-2df0-42a1-9b48-78bc640fe0c6",
                  "parentUUID": "e7d17647-de7e-4f84-90fb-d2b7886848cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2339fcd5-c5a2-45f8-8b43-5bb4cb5c717c",
                "a99a84ff-f780-4406-94b1-2e36c1b88e66",
                "1e575537-2df0-42a1-9b48-78bc640fe0c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d73a782e-b947-4f7a-8c1d-e71ebb617a1c",
          "title": "Pruebas del controlador de usuarios",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\usuarioController.test.js",
          "file": "\\tests\\usuarioController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de usuarios\"",
              "fullTitle": "Pruebas del controlador de usuarios \"after each\" hook in \"Pruebas del controlador de usuarios\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "34802b90-1d91-446e-8d05-dab37d49fefd",
              "parentUUID": "d73a782e-b947-4f7a-8c1d-e71ebb617a1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "510ebab3-f982-4c90-97f5-905712cf566c",
              "title": "Método GET: Obtiene todos los usuarios",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\usuarioController.test.js",
              "file": "\\tests\\usuarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todos los usuarios exitosamente",
                  "fullTitle": "Pruebas del controlador de usuarios Método GET: Obtiene todos los usuarios Debería obtener todos los usuarios exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockUsuarios = [\n    { id: 1, nombre: 'Juan Pérez', email: 'juan@example.com' },\n    { id: 2, nombre: 'Ana Gómez', email: 'ana@example.com' }\n];\nsinon.stub(Usuario, 'findAll').resolves(mockUsuarios);\nconst req = { headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait UsuarioController.getAllUsuarios(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockUsuarios\n})).to.be.true;",
                  "err": {},
                  "uuid": "cd96cd56-58a2-48ee-a8d7-7e645a58c7cf",
                  "parentUUID": "510ebab3-f982-4c90-97f5-905712cf566c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener los usuarios",
                  "fullTitle": "Pruebas del controlador de usuarios Método GET: Obtiene todos los usuarios Debería manejar errores al obtener los usuarios",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Usuario, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = { headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait UsuarioController.getAllUsuarios(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "a167b4fb-c8b6-4cd4-9fc9-f3f8ccdac842",
                  "parentUUID": "510ebab3-f982-4c90-97f5-905712cf566c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd96cd56-58a2-48ee-a8d7-7e645a58c7cf",
                "a167b4fb-c8b6-4cd4-9fc9-f3f8ccdac842"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5cf3f89c-9a53-4ca4-b0f7-bdc3c2a4a56d",
              "title": "Método DELETE: Elimina un usuario",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\usuarioController.test.js",
              "file": "\\tests\\usuarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería manejar errores al eliminar un usuario",
                  "fullTitle": "Pruebas del controlador de usuarios Método DELETE: Elimina un usuario Debería manejar errores al eliminar un usuario",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Usuario, 'delete').rejects(new Error('Error al eliminar el usuario'));\nconst req = { params: { id: 1 }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait UsuarioController.delete(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al eliminar el usuario',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "3be78840-cb8f-4421-a40a-99b90e0c7a24",
                  "parentUUID": "5cf3f89c-9a53-4ca4-b0f7-bdc3c2a4a56d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3be78840-cb8f-4421-a40a-99b90e0c7a24"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb4f2120-3e8b-4c93-aac3-3d6bed925c0e",
              "title": "Método GET: Genera y descarga un archivo Excel con la lista de usuarios",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\usuarioController.test.js",
              "file": "\\tests\\usuarioController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería generar y descargar el archivo Excel exitosamente",
                  "fullTitle": "Pruebas del controlador de usuarios Método GET: Genera y descarga un archivo Excel con la lista de usuarios Debería generar y descargar el archivo Excel exitosamente",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockUsuarios = [\n    { id: 1, nombre: 'Juan Pérez', email: 'juan@example.com' },\n    { id: 2, nombre: 'Ana Gómez', email: 'ana@example.com' }\n];\nsinon.stub(Usuario, 'generarExcel').resolves(mockUsuarios);\nconst req = { headers: { Authorization: 'powerclean' } };\nconst res = {\n    setHeader: sinon.stub(),\n    send: sinon.stub()\n};\nawait UsuarioController.downloadUsuariosExcel(req, res);\nexpect(res.setHeader.calledWith('Content-Disposition', 'attachment; filename=usuarios.xlsx')).to.be.true;\nexpect(res.setHeader.calledWith('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')).to.be.true;\nexpect(res.send.called).to.be.true;",
                  "err": {},
                  "uuid": "163ba449-8a9a-4da4-83b7-bca86fa0341d",
                  "parentUUID": "bb4f2120-3e8b-4c93-aac3-3d6bed925c0e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "163ba449-8a9a-4da4-83b7-bca86fa0341d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8c69e4fc-37af-4c8f-820b-a3a21a8088ef",
          "title": "Pruebas del controlador de ventas",
          "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\ventasController.test.js",
          "file": "\\tests\\ventasController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del controlador de ventas\"",
              "fullTitle": "Pruebas del controlador de ventas \"after each\" hook in \"Pruebas del controlador de ventas\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "f462a1af-ae66-4136-8a4d-fa9736a7a68d",
              "parentUUID": "8c69e4fc-37af-4c8f-820b-a3a21a8088ef",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "96e1a9a5-b0e5-4afd-9fbe-4408ccddb556",
              "title": "Método GET: Obtiene todas las ventas",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\ventasController.test.js",
              "file": "\\tests\\ventasController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener todas las ventas exitosamente",
                  "fullTitle": "Pruebas del controlador de ventas Método GET: Obtiene todas las ventas Debería obtener todas las ventas exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockVentas = [\n    { id: 1, folioVenta: 'V001', total: 100 },\n    { id: 2, folioVenta: 'V002', total: 200 }\n];\nsinon.stub(Venta, 'findAll').resolves(mockVentas);\nconst req = { headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.getAllVentas(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockVentas\n})).to.be.true;",
                  "err": {},
                  "uuid": "74709834-a609-44ea-a877-1ee7544750fb",
                  "parentUUID": "96e1a9a5-b0e5-4afd-9fbe-4408ccddb556",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al obtener las ventas",
                  "fullTitle": "Pruebas del controlador de ventas Método GET: Obtiene todas las ventas Debería manejar errores al obtener las ventas",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Venta, 'findAll').rejects(new Error('Error de base de datos'));\nconst req = { headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.getAllVentas(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error de base de datos',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "2d406272-5e12-479f-af98-be0fa84506f3",
                  "parentUUID": "96e1a9a5-b0e5-4afd-9fbe-4408ccddb556",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74709834-a609-44ea-a877-1ee7544750fb",
                "2d406272-5e12-479f-af98-be0fa84506f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "396b887c-adcd-49af-b7af-359643bba7c5",
              "title": "Método GET: Buscar ventas por todos los parámetros",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\ventasController.test.js",
              "file": "\\tests\\ventasController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería buscar ventas exitosamente",
                  "fullTitle": "Pruebas del controlador de ventas Método GET: Buscar ventas por todos los parámetros Debería buscar ventas exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const searchString = 'V001';\nconst mockVentas = [{ id: 1, folioVenta: 'V001', total: 100 }];\nsinon.stub(Venta, 'searchAllColumns').resolves(mockVentas);\nconst req = { params: { q: searchString }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.searchAllColumnsVentas(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockVentas\n})).to.be.true;",
                  "err": {},
                  "uuid": "5583a9ac-3050-4041-a076-3e5f21a22015",
                  "parentUUID": "396b887c-adcd-49af-b7af-359643bba7c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "fullTitle": "Pruebas del controlador de ventas Método GET: Buscar ventas por todos los parámetros Debería devolver un error si el parámetro \"q\" es obligatorio",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = { params: {}, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.searchAllColumnsVentas(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({\n    code: 400,\n    message: \"El parámetro 'q' es obligatorio\",\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "751d46bc-ef24-44fe-9e81-337c7d73b597",
                  "parentUUID": "396b887c-adcd-49af-b7af-359643bba7c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5583a9ac-3050-4041-a076-3e5f21a22015",
                "751d46bc-ef24-44fe-9e81-337c7d73b597"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "caa088e6-66cd-4d19-993d-b67020be1f77",
              "title": "Método POST: Crea una nueva venta",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\ventasController.test.js",
              "file": "\\tests\\ventasController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería crear una venta exitosamente",
                  "fullTitle": "Pruebas del controlador de ventas Método POST: Crea una nueva venta Debería crear una venta exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nuevaVenta = { id: 1, folioVenta: 'V003', total: 300 };\nsinon.stub(Venta, 'create').resolves(nuevaVenta);\nconst req = { body: { folioVenta: 'V003', total: 300 }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.createVenta(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    code: 201,\n    message: 'Venta creada exitosamente',\n    data: nuevaVenta\n})).to.be.true;",
                  "err": {},
                  "uuid": "0678268f-b080-449f-8fc3-d358c9839bca",
                  "parentUUID": "caa088e6-66cd-4d19-993d-b67020be1f77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería manejar errores al crear una venta",
                  "fullTitle": "Pruebas del controlador de ventas Método POST: Crea una nueva venta Debería manejar errores al crear una venta",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Venta, 'create').rejects(new Error('Error al crear la venta'));\nconst req = { body: { folioVenta: 'V003', total: 300 }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.createVenta(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    code: 500,\n    message: 'Error al crear la venta',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "36a68782-2255-48e1-984a-4aecbc24d3f3",
                  "parentUUID": "caa088e6-66cd-4d19-993d-b67020be1f77",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0678268f-b080-449f-8fc3-d358c9839bca",
                "36a68782-2255-48e1-984a-4aecbc24d3f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "85f9b1e1-1b72-4d96-b6cf-dc3890a90b57",
              "title": "Método GET: Obtiene una venta por ID (FolioVenta)",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\ventasController.test.js",
              "file": "\\tests\\ventasController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería obtener una venta por ID exitosamente",
                  "fullTitle": "Pruebas del controlador de ventas Método GET: Obtiene una venta por ID (FolioVenta) Debería obtener una venta por ID exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockVenta = { id: 1, folioVenta: 'V001', total: 100 };\nsinon.stub(Venta, 'findById').resolves(mockVenta);\nconst req = { params: { id: '1' }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.getVentaById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Operación exitosa',\n    data: mockVenta\n})).to.be.true;",
                  "err": {},
                  "uuid": "711221a5-2b5e-4772-ab72-fac8accc1558",
                  "parentUUID": "85f9b1e1-1b72-4d96-b6cf-dc3890a90b57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si la venta no existe",
                  "fullTitle": "Pruebas del controlador de ventas Método GET: Obtiene una venta por ID (FolioVenta) Debería devolver un error 404 si la venta no existe",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Venta, 'findById').resolves(null);\nconst req = { params: { id: '999' }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.getVentaById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Operación de venta no encontrada',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "e80b7db8-29a5-4be2-bc5d-331d82e5c10d",
                  "parentUUID": "85f9b1e1-1b72-4d96-b6cf-dc3890a90b57",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "711221a5-2b5e-4772-ab72-fac8accc1558",
                "e80b7db8-29a5-4be2-bc5d-331d82e5c10d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "307ae8d9-51a3-407e-9ab1-76ebd5fa888d",
              "title": "Método PUT: Actualiza una venta",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\ventasController.test.js",
              "file": "\\tests\\ventasController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería actualizar una venta exitosamente",
                  "fullTitle": "Pruebas del controlador de ventas Método PUT: Actualiza una venta Debería actualizar una venta exitosamente",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ventaActualizada = { id: 1, folioVenta: 'V001', total: 150 };\nsinon.stub(Venta, 'update').resolves(ventaActualizada);\nconst req = { params: { id: '1' }, body: { total: 150 }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.updateVenta(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Venta actualizada exitosamente',\n    data: ventaActualizada\n})).to.be.true;",
                  "err": {},
                  "uuid": "30009817-296c-44ac-8d0d-69c5414222fc",
                  "parentUUID": "307ae8d9-51a3-407e-9ab1-76ebd5fa888d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si la venta no existe",
                  "fullTitle": "Pruebas del controlador de ventas Método PUT: Actualiza una venta Debería devolver un error 404 si la venta no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Venta, 'update').resolves(null);\nconst req = { params: { id: '999' }, body: { total: 150 }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.updateVenta(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Operación de venta no encontrada',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "792dd9d7-cf4d-4bb7-9f20-ba7c525004d2",
                  "parentUUID": "307ae8d9-51a3-407e-9ab1-76ebd5fa888d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30009817-296c-44ac-8d0d-69c5414222fc",
                "792dd9d7-cf4d-4bb7-9f20-ba7c525004d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "615b8da3-f11f-4064-9e2c-b34c0f9ec7de",
              "title": "Método DELETE: Elimina una venta",
              "fullFile": "D:\\4toCuatri\\DOCKER\\powerclean\\tests\\ventasController.test.js",
              "file": "\\tests\\ventasController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Debería eliminar una venta exitosamente",
                  "fullTitle": "Pruebas del controlador de ventas Método DELETE: Elimina una venta Debería eliminar una venta exitosamente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ventaEliminada = { id: 1, folioVenta: 'V001', total: 100 };\nsinon.stub(Venta, 'delete').resolves(ventaEliminada);\nconst req = { params: { id: '1' }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.deleteVenta(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    code: 200,\n    message: 'Venta eliminada exitosamente',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "b5f4e9a5-1a71-402f-91cb-c7e2b30f3e17",
                  "parentUUID": "615b8da3-f11f-4064-9e2c-b34c0f9ec7de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Debería devolver un error 404 si la venta no existe",
                  "fullTitle": "Pruebas del controlador de ventas Método DELETE: Elimina una venta Debería devolver un error 404 si la venta no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Venta, 'delete').resolves(false);\nconst req = { params: { id: '999' }, headers: { Authorization: 'powerclean' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};\nawait VentaController.deleteVenta(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n    code: 404,\n    message: 'Operación de venta no encontrada',\n    data: null\n})).to.be.true;",
                  "err": {},
                  "uuid": "0a90a3f2-81e9-49db-9c9d-2b69cb7a1f3f",
                  "parentUUID": "615b8da3-f11f-4064-9e2c-b34c0f9ec7de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5f4e9a5-1a71-402f-91cb-c7e2b30f3e17",
                "0a90a3f2-81e9-49db-9c9d-2b69cb7a1f3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}